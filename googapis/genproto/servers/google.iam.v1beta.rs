// This file is @generated by prost-build.
/// Represents a collection of external workload identities. You can define IAM
/// policies to grant these identities access to Google Cloud resources.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkloadIdentityPool {
    /// Output only. The resource name of the pool.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// A display name for the pool. Cannot exceed 32 characters.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// A description of the pool. Cannot exceed 256 characters.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Output only. The state of the pool.
    #[prost(enumeration = "workload_identity_pool::State", tag = "4")]
    pub state: i32,
    /// Whether the pool is disabled. You cannot use a disabled pool to exchange
    /// tokens, or use existing tokens to access resources. If
    /// the pool is re-enabled, existing tokens grant access again.
    #[prost(bool, tag = "5")]
    pub disabled: bool,
}
/// Nested message and enum types in `WorkloadIdentityPool`.
pub mod workload_identity_pool {
    /// The current state of the pool.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// State unspecified.
        Unspecified = 0,
        /// The pool is active, and may be used in Google Cloud policies.
        Active = 1,
        /// The pool is soft-deleted. Soft-deleted pools are permanently deleted
        /// after approximately 30 days. You can restore a soft-deleted pool using
        /// [UndeleteWorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPools.UndeleteWorkloadIdentityPool].
        ///
        /// You cannot reuse the ID of a soft-deleted pool until it is permanently
        /// deleted.
        ///
        /// While a pool is deleted, you cannot use it to exchange tokens, or use
        /// existing tokens to access resources. If the pool is undeleted, existing
        /// tokens grant access again.
        Deleted = 2,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Active => "ACTIVE",
                Self::Deleted => "DELETED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "DELETED" => Some(Self::Deleted),
                _ => None,
            }
        }
    }
}
/// A configuration for an external identity provider.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkloadIdentityPoolProvider {
    /// Output only. The resource name of the provider.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// A display name for the provider. Cannot exceed 32 characters.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// A description for the provider. Cannot exceed 256 characters.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Output only. The state of the provider.
    #[prost(enumeration = "workload_identity_pool_provider::State", tag = "4")]
    pub state: i32,
    /// Whether the provider is disabled. You cannot use a disabled provider to
    /// exchange tokens. However, existing tokens still grant access.
    #[prost(bool, tag = "5")]
    pub disabled: bool,
    /// Maps attributes from authentication credentials issued by an external
    /// identity provider to Google Cloud attributes, such as `subject` and
    /// `segment`.
    ///
    /// Each key must be a string specifying the Google Cloud IAM attribute to
    /// map to.
    ///
    /// The following keys are supported:
    ///
    /// * `google.subject`: The principal IAM is authenticating. You can reference
    ///                      this value in IAM bindings. This is also the
    ///                      subject that appears in Cloud Logging logs.
    ///                      Cannot exceed 127 characters.
    ///
    /// * `google.groups`: Groups the external identity belongs to. You can grant
    ///                     groups access to resources using an IAM `principalSet`
    ///                     binding; access applies to all members of the group.
    ///
    /// You can also provide custom attributes by specifying
    /// `attribute.{custom_attribute}`, where `{custom_attribute}` is the name of
    /// the custom attribute to be mapped. You can define a maximum of 50 custom
    /// attributes. The maximum length of a mapped attribute key is
    /// 100 characters, and the key may only contain the characters \[a-z0-9_\].
    ///
    /// You can reference these attributes in IAM policies to define fine-grained
    /// access for a workload to Google Cloud resources. For example:
    ///
    /// * `google.subject`:
    /// `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}`
    ///
    /// * `google.groups`:
    /// `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}`
    ///
    /// * `attribute.{custom_attribute}`:
    /// `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}`
    ///
    /// Each value must be a \[Common Expression Language\]
    /// (<https://opensource.google/projects/cel>) function that maps an
    /// identity provider credential to the normalized attribute specified by the
    /// corresponding map key.
    ///
    /// You can use the `assertion` keyword in the expression to access a JSON
    /// representation of the authentication credential issued by the provider.
    ///
    /// The maximum length of an attribute mapping expression is 2048 characters.
    /// When evaluated, the total size of all mapped attributes must not exceed
    /// 8KB.
    ///
    /// For AWS providers, the following rules apply:
    ///
    /// - If no attribute mapping is defined, the following default mapping
    ///    applies:
    ///
    ///    ```
    ///    {
    ///      "google.subject":"assertion.arn",
    ///      "attribute.aws_role":
    ///          "assertion.arn.contains('assumed-role')"
    ///          " ? assertion.arn.extract('{account_arn}assumed-role/')"
    ///          "   + 'assumed-role/'"
    ///          "   + assertion.arn.extract('assumed-role/{role_name}/')"
    ///          " : assertion.arn",
    ///    }
    ///    ```
    ///
    /// - If any custom attribute mappings are defined, they must include a mapping
    ///    to the `google.subject` attribute.
    ///
    ///
    /// For OIDC providers, the following rules apply:
    ///
    /// - Custom attribute mappings must be defined, and must include a mapping to
    ///    the `google.subject` attribute. For example, the following maps the
    ///    `sub` claim of the incoming credential to the `subject` attribute on
    ///    a Google token.
    ///
    ///    ```
    ///    {"google.subject": "assertion.sub"}
    ///    ```
    #[prost(map = "string, string", tag = "6")]
    pub attribute_mapping: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// [A Common Expression Language](<https://opensource.google/projects/cel>)
    /// expression, in plain text, to restrict what otherwise valid authentication
    /// credentials issued by the provider should not be accepted.
    ///
    /// The expression must output a boolean representing whether to allow the
    /// federation.
    ///
    /// The following keywords may be referenced in the expressions:
    ///
    /// * `assertion`: JSON representing the authentication credential issued by
    ///                 the provider.
    /// * `google`: The Google attributes mapped from the assertion in the
    ///              `attribute_mappings`.
    /// * `attribute`: The custom attributes mapped from the assertion in the
    ///                 `attribute_mappings`.
    ///
    /// The maximum length of the attribute condition expression is 4096
    /// characters. If unspecified, all valid authentication credential are
    /// accepted.
    ///
    /// The following example shows how to only allow credentials with a mapped
    /// `google.groups` value of `admins`:
    ///
    /// ```
    /// "'admins' in google.groups"
    /// ```
    #[prost(string, tag = "7")]
    pub attribute_condition: ::prost::alloc::string::String,
    /// Identity provider configuration types.
    #[prost(oneof = "workload_identity_pool_provider::ProviderConfig", tags = "8, 9")]
    pub provider_config: ::core::option::Option<
        workload_identity_pool_provider::ProviderConfig,
    >,
}
/// Nested message and enum types in `WorkloadIdentityPoolProvider`.
pub mod workload_identity_pool_provider {
    /// Represents an Amazon Web Services identity provider.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Aws {
        /// Required. The AWS account ID.
        #[prost(string, tag = "1")]
        pub account_id: ::prost::alloc::string::String,
    }
    /// Represents an OpenId Connect 1.0 identity provider.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Oidc {
        /// Required. The OIDC issuer URL.
        #[prost(string, tag = "1")]
        pub issuer_uri: ::prost::alloc::string::String,
        /// Acceptable values for the `aud` field (audience) in the OIDC token. Token
        /// exchange requests are rejected if the token audience does not match one
        /// of the configured values. Each audience may be at most 256 characters. A
        /// maximum of 10 audiences may be configured.
        ///
        /// If this list is empty, the OIDC token audience must be equal to
        /// the full canonical resource name of the WorkloadIdentityPoolProvider,
        /// with or without the HTTPS prefix. For example:
        ///
        /// ```
        /// //iam.googleapis.com/projects/<project-number>/locations/<location>/workloadIdentityPools/<pool-id>/providers/<provider-id>
        /// <https://iam.googleapis.com/projects/<project-number>/locations/<location>/workloadIdentityPools/<pool-id>/providers/<provider-id>>
        /// ```
        #[prost(string, repeated, tag = "2")]
        pub allowed_audiences: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    /// The current state of the provider.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// State unspecified.
        Unspecified = 0,
        /// The provider is active, and may be used to validate authentication
        /// credentials.
        Active = 1,
        /// The provider is soft-deleted. Soft-deleted providers are permanently
        /// deleted after approximately 30 days. You can restore a soft-deleted
        /// provider using
        /// [UndeleteWorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPools.UndeleteWorkloadIdentityPoolProvider].
        ///
        /// You cannot reuse the ID of a soft-deleted provider until it is
        /// permanently deleted.
        Deleted = 2,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Active => "ACTIVE",
                Self::Deleted => "DELETED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "DELETED" => Some(Self::Deleted),
                _ => None,
            }
        }
    }
    /// Identity provider configuration types.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ProviderConfig {
        /// An Amazon Web Services identity provider.
        #[prost(message, tag = "8")]
        Aws(Aws),
        /// An OpenId Connect 1.0 identity provider.
        #[prost(message, tag = "9")]
        Oidc(Oidc),
    }
}
/// Request message for ListWorkloadIdentityPools.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkloadIdentityPoolsRequest {
    /// Required. The parent resource to list pools for.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of pools to return.
    /// If unspecified, at most 50 pools are returned.
    /// The maximum value is 1000; values above are 1000 truncated to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A page token, received from a previous `ListWorkloadIdentityPools`
    /// call. Provide this to retrieve the subsequent page.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Whether to return soft-deleted pools.
    #[prost(bool, tag = "4")]
    pub show_deleted: bool,
}
/// Response message for ListWorkloadIdentityPools.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkloadIdentityPoolsResponse {
    /// A list of pools.
    #[prost(message, repeated, tag = "1")]
    pub workload_identity_pools: ::prost::alloc::vec::Vec<WorkloadIdentityPool>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for GetWorkloadIdentityPool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkloadIdentityPoolRequest {
    /// Required. The name of the pool to retrieve.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for CreateWorkloadIdentityPool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWorkloadIdentityPoolRequest {
    /// Required. The parent resource to create the pool in. The only supported
    /// location is `global`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The pool to create.
    #[prost(message, optional, tag = "2")]
    pub workload_identity_pool: ::core::option::Option<WorkloadIdentityPool>,
    /// Required. The ID to use for the pool, which becomes the
    /// final component of the resource name. This value should be 4-32 characters,
    /// and may contain the characters \[a-z0-9-\]. The prefix `gcp-` is
    /// reserved for use by Google, and may not be specified.
    #[prost(string, tag = "3")]
    pub workload_identity_pool_id: ::prost::alloc::string::String,
}
/// Request message for UpdateWorkloadIdentityPool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateWorkloadIdentityPoolRequest {
    /// Required. The pool to update. The `name` field is used to identify the pool.
    #[prost(message, optional, tag = "1")]
    pub workload_identity_pool: ::core::option::Option<WorkloadIdentityPool>,
    /// Required. The list of fields update.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// Request message for DeleteWorkloadIdentityPool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteWorkloadIdentityPoolRequest {
    /// Required. The name of the pool to delete.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for UndeleteWorkloadIdentityPool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UndeleteWorkloadIdentityPoolRequest {
    /// Required. The name of the pool to undelete.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for ListWorkloadIdentityPoolProviders.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkloadIdentityPoolProvidersRequest {
    /// Required. The pool to list providers for.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of providers to return.
    /// If unspecified, at most 50 providers are returned.
    /// The maximum value is 100; values above 100 are truncated to 100.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A page token, received from a previous
    /// `ListWorkloadIdentityPoolProviders` call. Provide this to retrieve the
    /// subsequent page.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Whether to return soft-deleted providers.
    #[prost(bool, tag = "4")]
    pub show_deleted: bool,
}
/// Response message for ListWorkloadIdentityPoolProviders.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkloadIdentityPoolProvidersResponse {
    /// A list of providers.
    #[prost(message, repeated, tag = "1")]
    pub workload_identity_pool_providers: ::prost::alloc::vec::Vec<
        WorkloadIdentityPoolProvider,
    >,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for GetWorkloadIdentityPoolProvider.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkloadIdentityPoolProviderRequest {
    /// Required. The name of the provider to retrieve.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for CreateWorkloadIdentityPoolProvider.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWorkloadIdentityPoolProviderRequest {
    /// Required. The pool to create this provider in.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The provider to create.
    #[prost(message, optional, tag = "2")]
    pub workload_identity_pool_provider: ::core::option::Option<
        WorkloadIdentityPoolProvider,
    >,
    /// Required. The ID for the provider, which becomes the
    /// final component of the resource name. This value must be 4-32 characters,
    /// and may contain the characters \[a-z0-9-\]. The prefix `gcp-` is
    /// reserved for use by Google, and may not be specified.
    #[prost(string, tag = "3")]
    pub workload_identity_pool_provider_id: ::prost::alloc::string::String,
}
/// Request message for UpdateWorkloadIdentityPoolProvider.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateWorkloadIdentityPoolProviderRequest {
    /// Required. The provider to update.
    #[prost(message, optional, tag = "1")]
    pub workload_identity_pool_provider: ::core::option::Option<
        WorkloadIdentityPoolProvider,
    >,
    /// Required. The list of fields to update.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// Request message for DeleteWorkloadIdentityPoolProvider.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteWorkloadIdentityPoolProviderRequest {
    /// Required. The name of the provider to delete.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for UndeleteWorkloadIdentityPoolProvider.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UndeleteWorkloadIdentityPoolProviderRequest {
    /// Required. The name of the provider to undelete.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Metadata for long-running WorkloadIdentityPool operations.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WorkloadIdentityPoolOperationMetadata {}
/// Metadata for long-running WorkloadIdentityPoolProvider operations.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WorkloadIdentityPoolProviderOperationMetadata {}
/// Generated server implementations.
pub mod workload_identity_pools_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with WorkloadIdentityPoolsServer.
    #[async_trait]
    pub trait WorkloadIdentityPools: std::marker::Send + std::marker::Sync + 'static {
        /// Lists all non-deleted
        /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool]s in a
        /// project. If `show_deleted` is set to `true`, then deleted pools are also
        /// listed.
        async fn list_workload_identity_pools(
            &self,
            request: tonic::Request<super::ListWorkloadIdentityPoolsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListWorkloadIdentityPoolsResponse>,
            tonic::Status,
        >;
        /// Gets an individual
        /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
        async fn get_workload_identity_pool(
            &self,
            request: tonic::Request<super::GetWorkloadIdentityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WorkloadIdentityPool>,
            tonic::Status,
        >;
        /// Creates a new
        /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
        ///
        /// You cannot reuse the name of a deleted pool until 30 days after deletion.
        async fn create_workload_identity_pool(
            &self,
            request: tonic::Request<super::CreateWorkloadIdentityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Updates an existing
        /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
        async fn update_workload_identity_pool(
            &self,
            request: tonic::Request<super::UpdateWorkloadIdentityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Deletes a
        /// [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
        ///
        /// You cannot use a deleted pool to exchange external
        /// credentials for Google Cloud credentials. However, deletion does
        /// not revoke credentials that have already been issued.
        /// Credentials issued for a deleted pool do not grant access to resources.
        /// If the pool is undeleted, and the credentials are not expired, they
        /// grant access again.
        /// You can undelete a pool for 30 days. After 30 days, deletion is
        /// permanent.
        /// You cannot update deleted pools. However, you can view and list them.
        async fn delete_workload_identity_pool(
            &self,
            request: tonic::Request<super::DeleteWorkloadIdentityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Undeletes a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool],
        /// as long as it was deleted fewer than 30 days ago.
        async fn undelete_workload_identity_pool(
            &self,
            request: tonic::Request<super::UndeleteWorkloadIdentityPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Lists all non-deleted
        /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider]s
        /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
        /// If `show_deleted` is set to `true`, then deleted providers are also listed.
        async fn list_workload_identity_pool_providers(
            &self,
            request: tonic::Request<super::ListWorkloadIdentityPoolProvidersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListWorkloadIdentityPoolProvidersResponse>,
            tonic::Status,
        >;
        /// Gets an individual
        /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider].
        async fn get_workload_identity_pool_provider(
            &self,
            request: tonic::Request<super::GetWorkloadIdentityPoolProviderRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WorkloadIdentityPoolProvider>,
            tonic::Status,
        >;
        /// Creates a new
        /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider]
        /// in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
        ///
        /// You cannot reuse the name of a deleted provider until 30 days after
        /// deletion.
        async fn create_workload_identity_pool_provider(
            &self,
            request: tonic::Request<super::CreateWorkloadIdentityPoolProviderRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Updates an existing
        /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
        async fn update_workload_identity_pool_provider(
            &self,
            request: tonic::Request<super::UpdateWorkloadIdentityPoolProviderRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Deletes a
        /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
        /// Deleting a provider does not revoke credentials that have already been
        /// issued; they continue to grant access.
        /// You can undelete a provider for 30 days. After 30 days, deletion is
        /// permanent.
        /// You cannot update deleted providers. However, you can view and list them.
        async fn delete_workload_identity_pool_provider(
            &self,
            request: tonic::Request<super::DeleteWorkloadIdentityPoolProviderRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Undeletes a
        /// [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider],
        /// as long as it was deleted fewer than 30 days ago.
        async fn undelete_workload_identity_pool_provider(
            &self,
            request: tonic::Request<super::UndeleteWorkloadIdentityPoolProviderRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
    }
    /// Manages WorkloadIdentityPools.
    #[derive(Debug)]
    pub struct WorkloadIdentityPoolsServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> WorkloadIdentityPoolsServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for WorkloadIdentityPoolsServer<T>
    where
        T: WorkloadIdentityPools,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/google.iam.v1beta.WorkloadIdentityPools/ListWorkloadIdentityPools" => {
                    #[allow(non_camel_case_types)]
                    struct ListWorkloadIdentityPoolsSvc<T: WorkloadIdentityPools>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WorkloadIdentityPools,
                    > tonic::server::UnaryService<
                        super::ListWorkloadIdentityPoolsRequest,
                    > for ListWorkloadIdentityPoolsSvc<T> {
                        type Response = super::ListWorkloadIdentityPoolsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ListWorkloadIdentityPoolsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkloadIdentityPools>::list_workload_identity_pools(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListWorkloadIdentityPoolsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.iam.v1beta.WorkloadIdentityPools/GetWorkloadIdentityPool" => {
                    #[allow(non_camel_case_types)]
                    struct GetWorkloadIdentityPoolSvc<T: WorkloadIdentityPools>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WorkloadIdentityPools,
                    > tonic::server::UnaryService<super::GetWorkloadIdentityPoolRequest>
                    for GetWorkloadIdentityPoolSvc<T> {
                        type Response = super::WorkloadIdentityPool;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetWorkloadIdentityPoolRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkloadIdentityPools>::get_workload_identity_pool(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetWorkloadIdentityPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.iam.v1beta.WorkloadIdentityPools/CreateWorkloadIdentityPool" => {
                    #[allow(non_camel_case_types)]
                    struct CreateWorkloadIdentityPoolSvc<T: WorkloadIdentityPools>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WorkloadIdentityPools,
                    > tonic::server::UnaryService<
                        super::CreateWorkloadIdentityPoolRequest,
                    > for CreateWorkloadIdentityPoolSvc<T> {
                        type Response = super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::CreateWorkloadIdentityPoolRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkloadIdentityPools>::create_workload_identity_pool(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateWorkloadIdentityPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.iam.v1beta.WorkloadIdentityPools/UpdateWorkloadIdentityPool" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateWorkloadIdentityPoolSvc<T: WorkloadIdentityPools>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WorkloadIdentityPools,
                    > tonic::server::UnaryService<
                        super::UpdateWorkloadIdentityPoolRequest,
                    > for UpdateWorkloadIdentityPoolSvc<T> {
                        type Response = super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::UpdateWorkloadIdentityPoolRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkloadIdentityPools>::update_workload_identity_pool(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateWorkloadIdentityPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.iam.v1beta.WorkloadIdentityPools/DeleteWorkloadIdentityPool" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteWorkloadIdentityPoolSvc<T: WorkloadIdentityPools>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WorkloadIdentityPools,
                    > tonic::server::UnaryService<
                        super::DeleteWorkloadIdentityPoolRequest,
                    > for DeleteWorkloadIdentityPoolSvc<T> {
                        type Response = super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::DeleteWorkloadIdentityPoolRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkloadIdentityPools>::delete_workload_identity_pool(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteWorkloadIdentityPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.iam.v1beta.WorkloadIdentityPools/UndeleteWorkloadIdentityPool" => {
                    #[allow(non_camel_case_types)]
                    struct UndeleteWorkloadIdentityPoolSvc<T: WorkloadIdentityPools>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WorkloadIdentityPools,
                    > tonic::server::UnaryService<
                        super::UndeleteWorkloadIdentityPoolRequest,
                    > for UndeleteWorkloadIdentityPoolSvc<T> {
                        type Response = super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::UndeleteWorkloadIdentityPoolRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkloadIdentityPools>::undelete_workload_identity_pool(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UndeleteWorkloadIdentityPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.iam.v1beta.WorkloadIdentityPools/ListWorkloadIdentityPoolProviders" => {
                    #[allow(non_camel_case_types)]
                    struct ListWorkloadIdentityPoolProvidersSvc<
                        T: WorkloadIdentityPools,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: WorkloadIdentityPools,
                    > tonic::server::UnaryService<
                        super::ListWorkloadIdentityPoolProvidersRequest,
                    > for ListWorkloadIdentityPoolProvidersSvc<T> {
                        type Response = super::ListWorkloadIdentityPoolProvidersResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ListWorkloadIdentityPoolProvidersRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkloadIdentityPools>::list_workload_identity_pool_providers(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListWorkloadIdentityPoolProvidersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.iam.v1beta.WorkloadIdentityPools/GetWorkloadIdentityPoolProvider" => {
                    #[allow(non_camel_case_types)]
                    struct GetWorkloadIdentityPoolProviderSvc<T: WorkloadIdentityPools>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WorkloadIdentityPools,
                    > tonic::server::UnaryService<
                        super::GetWorkloadIdentityPoolProviderRequest,
                    > for GetWorkloadIdentityPoolProviderSvc<T> {
                        type Response = super::WorkloadIdentityPoolProvider;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetWorkloadIdentityPoolProviderRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkloadIdentityPools>::get_workload_identity_pool_provider(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetWorkloadIdentityPoolProviderSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.iam.v1beta.WorkloadIdentityPools/CreateWorkloadIdentityPoolProvider" => {
                    #[allow(non_camel_case_types)]
                    struct CreateWorkloadIdentityPoolProviderSvc<
                        T: WorkloadIdentityPools,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: WorkloadIdentityPools,
                    > tonic::server::UnaryService<
                        super::CreateWorkloadIdentityPoolProviderRequest,
                    > for CreateWorkloadIdentityPoolProviderSvc<T> {
                        type Response = super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::CreateWorkloadIdentityPoolProviderRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkloadIdentityPools>::create_workload_identity_pool_provider(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateWorkloadIdentityPoolProviderSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.iam.v1beta.WorkloadIdentityPools/UpdateWorkloadIdentityPoolProvider" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateWorkloadIdentityPoolProviderSvc<
                        T: WorkloadIdentityPools,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: WorkloadIdentityPools,
                    > tonic::server::UnaryService<
                        super::UpdateWorkloadIdentityPoolProviderRequest,
                    > for UpdateWorkloadIdentityPoolProviderSvc<T> {
                        type Response = super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::UpdateWorkloadIdentityPoolProviderRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkloadIdentityPools>::update_workload_identity_pool_provider(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateWorkloadIdentityPoolProviderSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.iam.v1beta.WorkloadIdentityPools/DeleteWorkloadIdentityPoolProvider" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteWorkloadIdentityPoolProviderSvc<
                        T: WorkloadIdentityPools,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: WorkloadIdentityPools,
                    > tonic::server::UnaryService<
                        super::DeleteWorkloadIdentityPoolProviderRequest,
                    > for DeleteWorkloadIdentityPoolProviderSvc<T> {
                        type Response = super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::DeleteWorkloadIdentityPoolProviderRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkloadIdentityPools>::delete_workload_identity_pool_provider(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteWorkloadIdentityPoolProviderSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.iam.v1beta.WorkloadIdentityPools/UndeleteWorkloadIdentityPoolProvider" => {
                    #[allow(non_camel_case_types)]
                    struct UndeleteWorkloadIdentityPoolProviderSvc<
                        T: WorkloadIdentityPools,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: WorkloadIdentityPools,
                    > tonic::server::UnaryService<
                        super::UndeleteWorkloadIdentityPoolProviderRequest,
                    > for UndeleteWorkloadIdentityPoolProviderSvc<T> {
                        type Response = super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::UndeleteWorkloadIdentityPoolProviderRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkloadIdentityPools>::undelete_workload_identity_pool_provider(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UndeleteWorkloadIdentityPoolProviderSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for WorkloadIdentityPoolsServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "google.iam.v1beta.WorkloadIdentityPools";
    impl<T> tonic::server::NamedService for WorkloadIdentityPoolsServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}

// This file is @generated by prost-build.
/// Represents the metadata of the long-running operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time the operation finished running.
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server-defined resource path for the target of the operation.
    #[prost(string, tag = "3")]
    pub target: ::prost::alloc::string::String,
    /// Output only. Name of the verb executed by the operation.
    #[prost(string, tag = "4")]
    pub verb: ::prost::alloc::string::String,
    /// Output only. Human-readable status of the operation, if any.
    #[prost(string, tag = "5")]
    pub status_message: ::prost::alloc::string::String,
    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    #[prost(bool, tag = "6")]
    pub requested_cancellation: bool,
    /// Output only. API version used to start the operation.
    #[prost(string, tag = "7")]
    pub api_version: ::prost::alloc::string::String,
}
/// Represents the custom metadata of the RunWorkflow long-running operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunWorkflowCustomOperationMetadata {
    /// Output only. The time the operation was created.
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time the operation finished running.
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Name of the verb executed by the operation.
    #[prost(string, tag = "3")]
    pub verb: ::prost::alloc::string::String,
    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    #[prost(bool, tag = "4")]
    pub requested_cancellation: bool,
    /// Output only. API version used to start the operation.
    #[prost(string, tag = "5")]
    pub api_version: ::prost::alloc::string::String,
    /// Output only. Server-defined resource path for the target of the operation.
    #[prost(string, tag = "6")]
    pub target: ::prost::alloc::string::String,
    /// Output only. ID of the pipeline run created by RunWorkflow.
    #[prost(string, tag = "7")]
    pub pipeline_run_id: ::prost::alloc::string::String,
}
/// A connection to a SCM like GitHub, GitHub Enterprise, Bitbucket Data Center,
/// Bitbucket Cloud or GitLab.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Connection {
    /// Immutable. The resource name of the connection, in the format
    /// `projects/{project}/locations/{location}/connections/{connection_id}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. Server assigned timestamp for when the connection was created.
    #[prost(message, optional, tag = "3")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server assigned timestamp for when the connection was updated.
    #[prost(message, optional, tag = "4")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Installation state of the Connection.
    #[prost(message, optional, tag = "12")]
    pub installation_state: ::core::option::Option<InstallationState>,
    /// If disabled is set to true, functionality is disabled for this connection.
    /// Repository based API methods and webhooks processing for repositories in
    /// this connection will be disabled.
    #[prost(bool, tag = "13")]
    pub disabled: bool,
    /// Output only. Set to true when the connection is being set up or updated in
    /// the background.
    #[prost(bool, tag = "14")]
    pub reconciling: bool,
    /// Allows clients to store small amounts of arbitrary data.
    #[prost(map = "string, string", tag = "15")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// This checksum is computed by the server based on the value of other
    /// fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[prost(string, tag = "16")]
    pub etag: ::prost::alloc::string::String,
    /// Configuration for the connection depending on the type of provider.
    #[prost(oneof = "connection::ConnectionConfig", tags = "5, 6, 7, 8, 9")]
    pub connection_config: ::core::option::Option<connection::ConnectionConfig>,
}
/// Nested message and enum types in `Connection`.
pub mod connection {
    /// Configuration for the connection depending on the type of provider.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ConnectionConfig {
        /// Configuration for connections to github.com.
        #[prost(message, tag = "5")]
        GithubConfig(super::GitHubConfig),
        /// Configuration for connections to an instance of GitHub Enterprise.
        #[prost(message, tag = "6")]
        GithubEnterpriseConfig(super::GitHubEnterpriseConfig),
        /// Configuration for connections to gitlab.com or an instance of GitLab
        /// Enterprise.
        #[prost(message, tag = "7")]
        GitlabConfig(super::GitLabConfig),
        /// Configuration for connections to Bitbucket Data Center.
        #[prost(message, tag = "8")]
        BitbucketDataCenterConfig(super::BitbucketDataCenterConfig),
        /// Configuration for connections to Bitbucket Cloud.
        #[prost(message, tag = "9")]
        BitbucketCloudConfig(super::BitbucketCloudConfig),
    }
}
/// Describes stage and necessary actions to be taken by the
/// user to complete the installation. Used for GitHub and GitHub Enterprise
/// based connections.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstallationState {
    /// Output only. Current step of the installation process.
    #[prost(enumeration = "installation_state::Stage", tag = "1")]
    pub stage: i32,
    /// Output only. Message of what the user should do next to continue the
    /// installation. Empty string if the installation is already complete.
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// Output only. Link to follow for next action. Empty string if the
    /// installation is already complete.
    #[prost(string, tag = "3")]
    pub action_uri: ::prost::alloc::string::String,
}
/// Nested message and enum types in `InstallationState`.
pub mod installation_state {
    /// Stage of the installation process.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Stage {
        /// No stage specified.
        Unspecified = 0,
        /// Only for GitHub Enterprise. An App creation has been requested.
        /// The user needs to confirm the creation in their GitHub enterprise host.
        PendingCreateApp = 1,
        /// User needs to authorize the GitHub (or Enterprise) App via OAuth.
        PendingUserOauth = 2,
        /// User needs to follow the link to install the GitHub (or Enterprise) App.
        PendingInstallApp = 3,
        /// Installation process has been completed.
        Complete = 10,
    }
    impl Stage {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Stage::Unspecified => "STAGE_UNSPECIFIED",
                Stage::PendingCreateApp => "PENDING_CREATE_APP",
                Stage::PendingUserOauth => "PENDING_USER_OAUTH",
                Stage::PendingInstallApp => "PENDING_INSTALL_APP",
                Stage::Complete => "COMPLETE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STAGE_UNSPECIFIED" => Some(Self::Unspecified),
                "PENDING_CREATE_APP" => Some(Self::PendingCreateApp),
                "PENDING_USER_OAUTH" => Some(Self::PendingUserOauth),
                "PENDING_INSTALL_APP" => Some(Self::PendingInstallApp),
                "COMPLETE" => Some(Self::Complete),
                _ => None,
            }
        }
    }
}
/// Request message for FetchLinkableRepositories.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchLinkableRepositoriesRequest {
    /// Required. The name of the Connection.
    /// Format: `projects/*/locations/*/connections/*`.
    #[prost(string, tag = "1")]
    pub connection: ::prost::alloc::string::String,
    /// Number of results to return in the list. Default to 20.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Page start.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
/// Response message for FetchLinkableRepositories.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchLinkableRepositoriesResponse {
    /// repositories ready to be created.
    #[prost(message, repeated, tag = "1")]
    pub repositories: ::prost::alloc::vec::Vec<Repository>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Configuration for connections to github.com.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitHubConfig {
    /// OAuth credential of the account that authorized the Cloud Build GitHub App.
    /// It is recommended to use a robot account instead of a human user account.
    /// The OAuth token must be tied to the Cloud Build GitHub App.
    #[prost(message, optional, tag = "1")]
    pub authorizer_credential: ::core::option::Option<OAuthCredential>,
    /// GitHub App installation id.
    #[prost(int64, tag = "2")]
    pub app_installation_id: i64,
}
/// Configuration for connections to an instance of GitHub Enterprise.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitHubEnterpriseConfig {
    /// Required. The URI of the GitHub Enterprise host this connection is for.
    #[prost(string, tag = "1")]
    pub host_uri: ::prost::alloc::string::String,
    /// Required. API Key used for authentication of webhook events.
    #[prost(string, tag = "12")]
    pub api_key: ::prost::alloc::string::String,
    /// Id of the GitHub App created from the manifest.
    #[prost(int64, tag = "2")]
    pub app_id: i64,
    /// The URL-friendly name of the GitHub App.
    #[prost(string, tag = "13")]
    pub app_slug: ::prost::alloc::string::String,
    /// SecretManager resource containing the private key of the GitHub App,
    /// formatted as `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "4")]
    pub private_key_secret_version: ::prost::alloc::string::String,
    /// SecretManager resource containing the webhook secret of the GitHub App,
    /// formatted as `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "5")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    /// ID of the installation of the GitHub App.
    #[prost(int64, tag = "9")]
    pub app_installation_id: i64,
    /// Configuration for using Service Directory to privately connect to a GitHub
    /// Enterprise server. This should only be set if the GitHub Enterprise server
    /// is hosted on-premises and not reachable by public internet. If this field
    /// is left empty, calls to the GitHub Enterprise server will be made over the
    /// public internet.
    #[prost(message, optional, tag = "10")]
    pub service_directory_config: ::core::option::Option<ServiceDirectoryConfig>,
    /// SSL certificate to use for requests to GitHub Enterprise.
    #[prost(string, tag = "11")]
    pub ssl_ca: ::prost::alloc::string::String,
    /// Output only. GitHub Enterprise version installed at the host_uri.
    #[prost(string, tag = "14")]
    pub server_version: ::prost::alloc::string::String,
}
/// Configuration for connections to gitlab.com or an instance of GitLab
/// Enterprise.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitLabConfig {
    /// The URI of the GitLab Enterprise host this connection is for.
    /// If not specified, the default value is <https://gitlab.com.>
    #[prost(string, tag = "1")]
    pub host_uri: ::prost::alloc::string::String,
    /// Required. Immutable. SecretManager resource containing the webhook secret
    /// of a GitLab Enterprise project, formatted as
    /// `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "2")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    /// Required. A GitLab personal access token with the minimum `read_api` scope
    /// access.
    #[prost(message, optional, tag = "3")]
    pub read_authorizer_credential: ::core::option::Option<UserCredential>,
    /// Required. A GitLab personal access token with the `api` scope access.
    #[prost(message, optional, tag = "4")]
    pub authorizer_credential: ::core::option::Option<UserCredential>,
    /// Configuration for using Service Directory to privately connect to a GitLab
    /// Enterprise server. This should only be set if the GitLab Enterprise server
    /// is hosted on-premises and not reachable by public internet. If this field
    /// is left empty, calls to the GitLab Enterprise server will be made over the
    /// public internet.
    #[prost(message, optional, tag = "5")]
    pub service_directory_config: ::core::option::Option<ServiceDirectoryConfig>,
    /// SSL certificate to use for requests to GitLab Enterprise.
    #[prost(string, tag = "6")]
    pub ssl_ca: ::prost::alloc::string::String,
    /// Output only. Version of the GitLab Enterprise server running on the
    /// `host_uri`.
    #[prost(string, tag = "7")]
    pub server_version: ::prost::alloc::string::String,
}
/// Configuration for connections to Bitbucket Data Center.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BitbucketDataCenterConfig {
    /// Required. The URI of the Bitbucket Data Center instance or cluster this
    /// connection is for.
    #[prost(string, tag = "1")]
    pub host_uri: ::prost::alloc::string::String,
    /// Required. Immutable. SecretManager resource containing the webhook secret
    /// used to verify webhook events, formatted as
    /// `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "2")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    /// Required. A http access token with the `REPO_READ` access.
    #[prost(message, optional, tag = "3")]
    pub read_authorizer_credential: ::core::option::Option<UserCredential>,
    /// Required. A http access token with the `REPO_ADMIN` scope access.
    #[prost(message, optional, tag = "4")]
    pub authorizer_credential: ::core::option::Option<UserCredential>,
    /// Optional. Configuration for using Service Directory to privately connect to
    /// a Bitbucket Data Center. This should only be set if the Bitbucket Data
    /// Center is hosted on-premises and not reachable by public internet. If this
    /// field is left empty, calls to the Bitbucket Data Center will be made over
    /// the public internet.
    #[prost(message, optional, tag = "5")]
    pub service_directory_config: ::core::option::Option<ServiceDirectoryConfig>,
    /// Optional. SSL certificate to use for requests to the Bitbucket Data Center.
    #[prost(string, tag = "6")]
    pub ssl_ca: ::prost::alloc::string::String,
    /// Output only. Version of the Bitbucket Data Center running on the
    /// `host_uri`.
    #[prost(string, tag = "7")]
    pub server_version: ::prost::alloc::string::String,
}
/// Configuration for connections to Bitbucket Cloud.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BitbucketCloudConfig {
    /// Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud
    /// Platform.
    #[prost(string, tag = "1")]
    pub workspace: ::prost::alloc::string::String,
    /// Required. SecretManager resource containing the webhook secret used to
    /// verify webhook events, formatted as `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "2")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    /// Required. An access token with the `repository` access. It can be either a
    /// workspace, project or repository access token. It's recommended to use a
    /// system account to generate the credentials.
    #[prost(message, optional, tag = "3")]
    pub read_authorizer_credential: ::core::option::Option<UserCredential>,
    /// Required. An access token with the `webhook`, `repository`,
    /// `repository:admin` and `pullrequest` scope access. It can be either a
    /// workspace, project or repository access token. It's recommended to use a
    /// system account to generate these credentials.
    #[prost(message, optional, tag = "4")]
    pub authorizer_credential: ::core::option::Option<UserCredential>,
}
/// ServiceDirectoryConfig represents Service Directory configuration for a
/// connection.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceDirectoryConfig {
    /// Required. The Service Directory service name.
    /// Format:
    /// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
    #[prost(string, tag = "1")]
    pub service: ::prost::alloc::string::String,
}
/// A repository associated to a parent connection.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Repository {
    /// Immutable. Resource name of the repository, in the format
    /// `projects/*/locations/*/connections/*/repositories/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Required. Git Clone HTTPS URI.
    #[prost(string, tag = "2")]
    pub remote_uri: ::prost::alloc::string::String,
    /// Output only. Server assigned timestamp for when the connection was created.
    #[prost(message, optional, tag = "4")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server assigned timestamp for when the connection was updated.
    #[prost(message, optional, tag = "5")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Allows clients to store small amounts of arbitrary data.
    #[prost(map = "string, string", tag = "6")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// This checksum is computed by the server based on the value of other
    /// fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[prost(string, tag = "7")]
    pub etag: ::prost::alloc::string::String,
    /// Output only. External ID of the webhook created for the repository.
    #[prost(string, tag = "8")]
    pub webhook_id: ::prost::alloc::string::String,
}
/// Represents an OAuth token of the account that authorized the Connection,
/// and associated metadata.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OAuthCredential {
    /// A SecretManager resource containing the OAuth token that authorizes
    /// the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "1")]
    pub oauth_token_secret_version: ::prost::alloc::string::String,
    /// Output only. The username associated to this token.
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
/// Represents a personal access token that authorized the Connection,
/// and associated metadata.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserCredential {
    /// Required. A SecretManager resource containing the user token that
    /// authorizes the Cloud Build connection. Format:
    /// `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "1")]
    pub user_token_secret_version: ::prost::alloc::string::String,
    /// Output only. The username associated to this token.
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
/// Message for creating a Connection
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConnectionRequest {
    /// Required. Project and location where the connection will be created.
    /// Format: `projects/*/locations/*`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The Connection to create.
    #[prost(message, optional, tag = "2")]
    pub connection: ::core::option::Option<Connection>,
    /// Required. The ID to use for the Connection, which will become the final
    /// component of the Connection's resource name. Names must be unique
    /// per-project per-location. Allows alphanumeric characters and any of
    /// -._~%!$&'()*+,;=@.
    #[prost(string, tag = "3")]
    pub connection_id: ::prost::alloc::string::String,
}
/// Message for getting the details of a Connection.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConnectionRequest {
    /// Required. The name of the Connection to retrieve.
    /// Format: `projects/*/locations/*/connections/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Message for requesting list of Connections.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConnectionsRequest {
    /// Required. The parent, which owns this collection of Connections.
    /// Format: `projects/*/locations/*`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Number of results to return in the list.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Page start.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
/// Message for response to listing Connections.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConnectionsResponse {
    /// The list of Connections.
    #[prost(message, repeated, tag = "1")]
    pub connections: ::prost::alloc::vec::Vec<Connection>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Message for updating a Connection.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateConnectionRequest {
    /// Required. The Connection to update.
    #[prost(message, optional, tag = "1")]
    pub connection: ::core::option::Option<Connection>,
    /// The list of fields to be updated.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// If set to true, and the connection is not found a new connection
    /// will be created. In this situation `update_mask` is ignored.
    /// The creation will succeed only if the input connection has all the
    /// necessary information (e.g a github_config with both  user_oauth_token and
    /// installation_id properties).
    #[prost(bool, tag = "3")]
    pub allow_missing: bool,
    /// The current etag of the connection.
    /// If an etag is provided and does not match the current etag of the
    /// connection, update will be blocked and an ABORTED error will be returned.
    #[prost(string, tag = "4")]
    pub etag: ::prost::alloc::string::String,
}
/// Message for deleting a Connection.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteConnectionRequest {
    /// Required. The name of the Connection to delete.
    /// Format: `projects/*/locations/*/connections/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The current etag of the connection.
    /// If an etag is provided and does not match the current etag of the
    /// connection, deletion will be blocked and an ABORTED error will be returned.
    #[prost(string, tag = "2")]
    pub etag: ::prost::alloc::string::String,
    /// If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "3")]
    pub validate_only: bool,
}
/// Message for creating a Repository.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateRepositoryRequest {
    /// Required. The connection to contain the repository. If the request is part
    /// of a BatchCreateRepositoriesRequest, this field should be empty or match
    /// the parent specified there.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The repository to create.
    #[prost(message, optional, tag = "2")]
    pub repository: ::core::option::Option<Repository>,
    /// Required. The ID to use for the repository, which will become the final
    /// component of the repository's resource name. This ID should be unique in
    /// the connection. Allows alphanumeric characters and any of
    /// -._~%!$&'()*+,;=@.
    #[prost(string, tag = "3")]
    pub repository_id: ::prost::alloc::string::String,
}
/// Message for creating repositoritories in batch.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCreateRepositoriesRequest {
    /// Required. The connection to contain all the repositories being created.
    /// Format: projects/*/locations/*/connections/*
    /// The parent field in the CreateRepositoryRequest messages
    /// must either be empty or match this field.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The request messages specifying the repositories to create.
    #[prost(message, repeated, tag = "2")]
    pub requests: ::prost::alloc::vec::Vec<CreateRepositoryRequest>,
}
/// Message for response of creating repositories in batch.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCreateRepositoriesResponse {
    /// Repository resources created.
    #[prost(message, repeated, tag = "1")]
    pub repositories: ::prost::alloc::vec::Vec<Repository>,
}
/// Message for getting the details of a Repository.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRepositoryRequest {
    /// Required. The name of the Repository to retrieve.
    /// Format: `projects/*/locations/*/connections/*/repositories/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Message for requesting list of Repositories.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRepositoriesRequest {
    /// Required. The parent, which owns this collection of Repositories.
    /// Format: `projects/*/locations/*/connections/*`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Number of results to return in the list.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Page start.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// A filter expression that filters resources listed in the response.
    /// Expressions must follow API improvement proposal
    /// [AIP-160](<https://google.aip.dev/160>). e.g.
    /// `remote_uri:"<https://github.com*"`.>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
}
/// Message for response to listing Repositories.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRepositoriesResponse {
    /// The list of Repositories.
    #[prost(message, repeated, tag = "1")]
    pub repositories: ::prost::alloc::vec::Vec<Repository>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Message for deleting a Repository.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRepositoryRequest {
    /// Required. The name of the Repository to delete.
    /// Format: `projects/*/locations/*/connections/*/repositories/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The current etag of the repository.
    /// If an etag is provided and does not match the current etag of the
    /// repository, deletion will be blocked and an ABORTED error will be returned.
    #[prost(string, tag = "2")]
    pub etag: ::prost::alloc::string::String,
    /// If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "3")]
    pub validate_only: bool,
}
/// Message for fetching SCM read/write token.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReadWriteTokenRequest {
    /// Required. The resource name of the repository in the format
    /// `projects/*/locations/*/connections/*/repositories/*`.
    #[prost(string, tag = "1")]
    pub repository: ::prost::alloc::string::String,
}
/// Message for fetching SCM read token.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReadTokenRequest {
    /// Required. The resource name of the repository in the format
    /// `projects/*/locations/*/connections/*/repositories/*`.
    #[prost(string, tag = "1")]
    pub repository: ::prost::alloc::string::String,
}
/// Message for responding to get read token.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReadTokenResponse {
    /// The token content.
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    /// Expiration timestamp. Can be empty if unknown or non-expiring.
    #[prost(message, optional, tag = "2")]
    pub expiration_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Message for responding to get read/write token.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReadWriteTokenResponse {
    /// The token content.
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    /// Expiration timestamp. Can be empty if unknown or non-expiring.
    #[prost(message, optional, tag = "2")]
    pub expiration_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// RPC request object accepted by the ProcessWebhook RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessWebhookRequest {
    /// Required. Project and location where the webhook will be received.
    /// Format: `projects/*/locations/*`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// HTTP request body.
    #[prost(message, optional, tag = "2")]
    pub body: ::core::option::Option<super::super::super::api::HttpBody>,
    /// Arbitrary additional key to find the maching repository for a webhook event
    /// if needed.
    #[prost(string, tag = "3")]
    pub webhook_key: ::prost::alloc::string::String,
}
/// Request for fetching git refs
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchGitRefsRequest {
    /// Required. The resource name of the repository in the format
    /// `projects/*/locations/*/connections/*/repositories/*`.
    #[prost(string, tag = "1")]
    pub repository: ::prost::alloc::string::String,
    /// Type of refs to fetch
    #[prost(enumeration = "fetch_git_refs_request::RefType", tag = "2")]
    pub ref_type: i32,
}
/// Nested message and enum types in `FetchGitRefsRequest`.
pub mod fetch_git_refs_request {
    /// Type of refs
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum RefType {
        /// No type specified.
        Unspecified = 0,
        /// To fetch tags.
        Tag = 1,
        /// To fetch branches.
        Branch = 2,
    }
    impl RefType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                RefType::Unspecified => "REF_TYPE_UNSPECIFIED",
                RefType::Tag => "TAG",
                RefType::Branch => "BRANCH",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "REF_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "TAG" => Some(Self::Tag),
                "BRANCH" => Some(Self::Branch),
                _ => None,
            }
        }
    }
}
/// Response for fetching git refs
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchGitRefsResponse {
    /// Name of the refs fetched.
    #[prost(string, repeated, tag = "1")]
    pub ref_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Generated server implementations.
pub mod repository_manager_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RepositoryManagerServer.
    #[async_trait]
    pub trait RepositoryManager: Send + Sync + 'static {
        /// Creates a Connection.
        async fn create_connection(
            &self,
            request: tonic::Request<super::CreateConnectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Gets details of a single connection.
        async fn get_connection(
            &self,
            request: tonic::Request<super::GetConnectionRequest>,
        ) -> std::result::Result<tonic::Response<super::Connection>, tonic::Status>;
        /// Lists Connections in a given project and location.
        async fn list_connections(
            &self,
            request: tonic::Request<super::ListConnectionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListConnectionsResponse>,
            tonic::Status,
        >;
        /// Updates a single connection.
        async fn update_connection(
            &self,
            request: tonic::Request<super::UpdateConnectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Deletes a single connection.
        async fn delete_connection(
            &self,
            request: tonic::Request<super::DeleteConnectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Creates a Repository.
        async fn create_repository(
            &self,
            request: tonic::Request<super::CreateRepositoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Creates multiple repositories inside a connection.
        async fn batch_create_repositories(
            &self,
            request: tonic::Request<super::BatchCreateRepositoriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Gets details of a single repository.
        async fn get_repository(
            &self,
            request: tonic::Request<super::GetRepositoryRequest>,
        ) -> std::result::Result<tonic::Response<super::Repository>, tonic::Status>;
        /// Lists Repositories in a given connection.
        async fn list_repositories(
            &self,
            request: tonic::Request<super::ListRepositoriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListRepositoriesResponse>,
            tonic::Status,
        >;
        /// Deletes a single repository.
        async fn delete_repository(
            &self,
            request: tonic::Request<super::DeleteRepositoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Fetches read/write token of a given repository.
        async fn fetch_read_write_token(
            &self,
            request: tonic::Request<super::FetchReadWriteTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchReadWriteTokenResponse>,
            tonic::Status,
        >;
        /// Fetches read token of a given repository.
        async fn fetch_read_token(
            &self,
            request: tonic::Request<super::FetchReadTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchReadTokenResponse>,
            tonic::Status,
        >;
        /// FetchLinkableRepositories get repositories from SCM that are
        /// accessible and could be added to the connection.
        async fn fetch_linkable_repositories(
            &self,
            request: tonic::Request<super::FetchLinkableRepositoriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchLinkableRepositoriesResponse>,
            tonic::Status,
        >;
        /// Fetch the list of branches or tags for a given repository.
        async fn fetch_git_refs(
            &self,
            request: tonic::Request<super::FetchGitRefsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchGitRefsResponse>,
            tonic::Status,
        >;
    }
    /// Manages connections to source code repositories.
    #[derive(Debug)]
    pub struct RepositoryManagerServer<T: RepositoryManager> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: RepositoryManager> RepositoryManagerServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RepositoryManagerServer<T>
    where
        T: RepositoryManager,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/google.devtools.cloudbuild.v2.RepositoryManager/CreateConnection" => {
                    #[allow(non_camel_case_types)]
                    struct CreateConnectionSvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::CreateConnectionRequest>
                    for CreateConnectionSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateConnectionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::create_connection(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreateConnectionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/GetConnection" => {
                    #[allow(non_camel_case_types)]
                    struct GetConnectionSvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::GetConnectionRequest>
                    for GetConnectionSvc<T> {
                        type Response = super::Connection;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetConnectionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::get_connection(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetConnectionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/ListConnections" => {
                    #[allow(non_camel_case_types)]
                    struct ListConnectionsSvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::ListConnectionsRequest>
                    for ListConnectionsSvc<T> {
                        type Response = super::ListConnectionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListConnectionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::list_connections(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListConnectionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/UpdateConnection" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateConnectionSvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::UpdateConnectionRequest>
                    for UpdateConnectionSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateConnectionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::update_connection(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateConnectionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/DeleteConnection" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteConnectionSvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::DeleteConnectionRequest>
                    for DeleteConnectionSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteConnectionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::delete_connection(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeleteConnectionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/CreateRepository" => {
                    #[allow(non_camel_case_types)]
                    struct CreateRepositorySvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::CreateRepositoryRequest>
                    for CreateRepositorySvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateRepositoryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::create_repository(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreateRepositorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/BatchCreateRepositories" => {
                    #[allow(non_camel_case_types)]
                    struct BatchCreateRepositoriesSvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::BatchCreateRepositoriesRequest>
                    for BatchCreateRepositoriesSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::BatchCreateRepositoriesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::batch_create_repositories(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = BatchCreateRepositoriesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/GetRepository" => {
                    #[allow(non_camel_case_types)]
                    struct GetRepositorySvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::GetRepositoryRequest>
                    for GetRepositorySvc<T> {
                        type Response = super::Repository;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRepositoryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::get_repository(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetRepositorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/ListRepositories" => {
                    #[allow(non_camel_case_types)]
                    struct ListRepositoriesSvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::ListRepositoriesRequest>
                    for ListRepositoriesSvc<T> {
                        type Response = super::ListRepositoriesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListRepositoriesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::list_repositories(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListRepositoriesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/DeleteRepository" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteRepositorySvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::DeleteRepositoryRequest>
                    for DeleteRepositorySvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteRepositoryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::delete_repository(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeleteRepositorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/FetchReadWriteToken" => {
                    #[allow(non_camel_case_types)]
                    struct FetchReadWriteTokenSvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::FetchReadWriteTokenRequest>
                    for FetchReadWriteTokenSvc<T> {
                        type Response = super::FetchReadWriteTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FetchReadWriteTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::fetch_read_write_token(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = FetchReadWriteTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/FetchReadToken" => {
                    #[allow(non_camel_case_types)]
                    struct FetchReadTokenSvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::FetchReadTokenRequest>
                    for FetchReadTokenSvc<T> {
                        type Response = super::FetchReadTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FetchReadTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::fetch_read_token(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = FetchReadTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/FetchLinkableRepositories" => {
                    #[allow(non_camel_case_types)]
                    struct FetchLinkableRepositoriesSvc<T: RepositoryManager>(
                        pub Arc<T>,
                    );
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<
                        super::FetchLinkableRepositoriesRequest,
                    > for FetchLinkableRepositoriesSvc<T> {
                        type Response = super::FetchLinkableRepositoriesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FetchLinkableRepositoriesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::fetch_linkable_repositories(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = FetchLinkableRepositoriesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudbuild.v2.RepositoryManager/FetchGitRefs" => {
                    #[allow(non_camel_case_types)]
                    struct FetchGitRefsSvc<T: RepositoryManager>(pub Arc<T>);
                    impl<
                        T: RepositoryManager,
                    > tonic::server::UnaryService<super::FetchGitRefsRequest>
                    for FetchGitRefsSvc<T> {
                        type Response = super::FetchGitRefsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FetchGitRefsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryManager>::fetch_git_refs(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = FetchGitRefsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: RepositoryManager> Clone for RepositoryManagerServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: RepositoryManager> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: RepositoryManager> tonic::server::NamedService
    for RepositoryManagerServer<T> {
        const NAME: &'static str = "google.devtools.cloudbuild.v2.RepositoryManager";
    }
}

// This file is @generated by prost-build.
/// Request sent to FCM from the connected client.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpstreamRequest {
    /// The type of request the client is making to FCM.
    #[prost(oneof = "upstream_request::RequestType", tags = "1")]
    pub request_type: ::core::option::Option<upstream_request::RequestType>,
}
/// Nested message and enum types in `UpstreamRequest`.
pub mod upstream_request {
    /// The type of request the client is making to FCM.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum RequestType {
        /// Message acknowledgement.
        #[prost(message, tag = "1")]
        Ack(super::Ack),
    }
}
/// Response sent to the connected client from FCM.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DownstreamResponse {
    /// The type of response FCM is sending to the client.
    #[prost(oneof = "downstream_response::ResponseType", tags = "1")]
    pub response_type: ::core::option::Option<downstream_response::ResponseType>,
}
/// Nested message and enum types in `DownstreamResponse`.
pub mod downstream_response {
    /// The type of response FCM is sending to the client.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ResponseType {
        /// Message sent to FCM via the [Send
        /// API](<https://firebase.google.com/docs/cloud-messaging/send-message>)
        /// targeting this client.
        #[prost(message, tag = "1")]
        Message(super::Message),
    }
}
/// Acknowledgement to indicate a client successfully received an FCM message.
///
/// If a message is not acked, FCM will continously resend the message until
/// it expires. Duplicate delivery in this case is working as intended.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ack {
    /// Id of message being acknowledged
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
}
/// Message created through the [Send
/// API](<https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#resource-message>).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    /// The identifier of the message. Used to ack the message.
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    /// Time the message was received in FCM.
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Expiry time of the message. Currently it is always 4 weeks.
    #[prost(message, optional, tag = "3")]
    pub expire_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The arbitrary payload set in the [Send
    /// API](<https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#resource-message>).
    #[prost(map = "string, string", tag = "4")]
    pub data: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Generated server implementations.
pub mod connection_api_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ConnectionApiServer.
    #[async_trait]
    pub trait ConnectionApi: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the Connect method.
        type ConnectStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::DownstreamResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Creates a streaming connection with FCM to send messages and their
        /// respective ACKs.
        ///
        /// The client credentials need to be passed in the [gRPC
        /// Metadata](https://grpc.io/docs/guides/concepts.html#metadata). The Format
        /// of the header is:
        ///   Key: "authorization"
        ///   Value: "Checkin [client_id:secret]"
        ///
        ///
        /// The project's API key also needs to be sent to authorize the project.
        /// That can be set in the X-Goog-Api-Key Metadata header.
        async fn connect(
            &self,
            request: tonic::Request<tonic::Streaming<super::UpstreamRequest>>,
        ) -> std::result::Result<tonic::Response<Self::ConnectStream>, tonic::Status>;
    }
    /// FCM's service to create client connections to send/receive messages.
    #[derive(Debug)]
    pub struct ConnectionApiServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ConnectionApiServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ConnectionApiServer<T>
    where
        T: ConnectionApi,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/google.firebase.fcm.connection.v1alpha1.ConnectionApi/Connect" => {
                    #[allow(non_camel_case_types)]
                    struct ConnectSvc<T: ConnectionApi>(pub Arc<T>);
                    impl<
                        T: ConnectionApi,
                    > tonic::server::StreamingService<super::UpstreamRequest>
                    for ConnectSvc<T> {
                        type Response = super::DownstreamResponse;
                        type ResponseStream = T::ConnectStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::UpstreamRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ConnectionApi>::connect(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ConnectSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ConnectionApiServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "google.firebase.fcm.connection.v1alpha1.ConnectionApi";
    impl<T> tonic::server::NamedService for ConnectionApiServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}

// This file is @generated by prost-build.
/// Local inventory information for the product. Represents in-store information
/// for a specific product at the store specified by
/// [`storeCode`][google.shopping.merchant.inventories.v1beta.LocalInventory.store_code].
/// For a list of all accepted attribute values, see the [local product inventory
/// data specification](<https://support.google.com/merchants/answer/3061342>).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LocalInventory {
    /// Output only. The name of the `LocalInventory` resource.
    /// Format:
    /// `accounts/{account}/products/{product}/localInventories/{store_code}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The account that owns the product. This field will be ignored
    /// if set by the client.
    #[prost(int64, tag = "2")]
    pub account: i64,
    /// Required. Immutable. Store code (the store ID from your Business Profile)
    /// of the physical store the product is sold in. See the [Local product
    /// inventory data
    /// specification](<https://support.google.com/merchants/answer/3061342>) for
    /// more information.
    #[prost(string, tag = "3")]
    pub store_code: ::prost::alloc::string::String,
    /// Price of the product at this store.
    #[prost(message, optional, tag = "4")]
    pub price: ::core::option::Option<super::super::super::r#type::Price>,
    /// Sale price of the product at this store. Mandatory if
    /// [`salePriceEffectiveDate`][google.shopping.merchant.inventories.v1beta.LocalInventory.sale_price_effective_date]
    /// is defined.
    #[prost(message, optional, tag = "5")]
    pub sale_price: ::core::option::Option<super::super::super::r#type::Price>,
    /// The `TimePeriod` of the
    /// sale at this store.
    #[prost(message, optional, tag = "6")]
    pub sale_price_effective_date: ::core::option::Option<
        super::super::super::super::r#type::Interval,
    >,
    /// Availability of the product at this store.
    /// For accepted attribute values, see the [local product inventory data
    /// specification](<https://support.google.com/merchants/answer/3061342>)
    #[prost(string, optional, tag = "7")]
    pub availability: ::core::option::Option<::prost::alloc::string::String>,
    /// Quantity of the product available at this store. Must be greater than or
    /// equal to zero.
    #[prost(int64, optional, tag = "8")]
    pub quantity: ::core::option::Option<i64>,
    /// Supported pickup method for this product. Unless the value is `"not
    /// supported"`, this field must be submitted together with
    /// `pickupSla`.
    /// For accepted attribute values, see the [local product inventory data
    /// specification](<https://support.google.com/merchants/answer/3061342>)
    #[prost(string, optional, tag = "9")]
    pub pickup_method: ::core::option::Option<::prost::alloc::string::String>,
    /// Relative time period from the order date for an order for this product,
    /// from this store, to be ready for pickup. Must be submitted with
    /// `pickupMethod`.
    /// For accepted attribute values, see the [local product inventory data
    /// specification](<https://support.google.com/merchants/answer/3061342>)
    #[prost(string, optional, tag = "10")]
    pub pickup_sla: ::core::option::Option<::prost::alloc::string::String>,
    /// Location of the product inside the store. Maximum length is 20 bytes.
    #[prost(string, optional, tag = "11")]
    pub instore_product_location: ::core::option::Option<::prost::alloc::string::String>,
    /// A list of custom (merchant-provided) attributes. You can also use
    /// `CustomAttribute` to submit any attribute of the data specification in its
    /// generic form.
    #[prost(message, repeated, tag = "12")]
    pub custom_attributes: ::prost::alloc::vec::Vec<
        super::super::super::r#type::CustomAttribute,
    >,
}
/// Request message for the `ListLocalInventories` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListLocalInventoriesRequest {
    /// Required. The `name` of the parent product to list local inventories for.
    /// Format:
    /// `accounts/{account}/products/{product}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of `LocalInventory` resources for the given
    /// product to return. The service returns fewer than this value if the number
    /// of inventories for the given product is less that than the `pageSize`. The
    /// default value is 25000. The maximum value is 25000; If a value higher than
    /// the maximum is specified, then the `pageSize` will default to the maximum
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A page token, received from a previous `ListLocalInventories` call.
    /// Provide the page token to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListLocalInventories`
    /// must match the call that provided the page token. The token returned as
    /// [nextPageToken][google.shopping.merchant.inventories.v1beta.ListLocalInventoriesResponse.next_page_token]
    /// in the response to the previous request.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
/// Response message for the `ListLocalInventories` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListLocalInventoriesResponse {
    /// The `LocalInventory` resources for the given product from the specified
    /// account.
    #[prost(message, repeated, tag = "1")]
    pub local_inventories: ::prost::alloc::vec::Vec<LocalInventory>,
    /// A token, which can be sent as `pageToken` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for the `InsertLocalInventory` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertLocalInventoryRequest {
    /// Required. The account and product where this inventory will be inserted.
    /// Format: `accounts/{account}/products/{product}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. Local inventory information of the product. If the product
    /// already has a `LocalInventory` resource for the same `storeCode`, full
    /// replacement of the `LocalInventory` resource is performed.
    #[prost(message, optional, tag = "2")]
    pub local_inventory: ::core::option::Option<LocalInventory>,
}
/// Request message for the `DeleteLocalInventory` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteLocalInventoryRequest {
    /// Required. The name of the local inventory for the given product to delete.
    /// Format:
    /// `accounts/{account}/products/{product}/localInventories/{store_code}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Generated server implementations.
pub mod local_inventory_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with LocalInventoryServiceServer.
    #[async_trait]
    pub trait LocalInventoryService: std::marker::Send + std::marker::Sync + 'static {
        /// Lists the `LocalInventory` resources for the given product in your merchant
        /// account. The response might contain fewer items than specified by
        /// `pageSize`. If `pageToken` was returned in previous request, it can be used
        /// to obtain additional results.
        ///
        /// `LocalInventory` resources are listed per product for a given account.
        async fn list_local_inventories(
            &self,
            request: tonic::Request<super::ListLocalInventoriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListLocalInventoriesResponse>,
            tonic::Status,
        >;
        /// Inserts a `LocalInventory` resource to a product in your merchant
        /// account.
        ///
        /// Replaces the full `LocalInventory` resource if an entry with the same
        /// [`storeCode`][google.shopping.merchant.inventories.v1beta.LocalInventory.store_code]
        /// already exists for the product.
        ///
        /// It might take up to 30 minutes for the new or updated `LocalInventory`
        /// resource to appear in products.
        async fn insert_local_inventory(
            &self,
            request: tonic::Request<super::InsertLocalInventoryRequest>,
        ) -> std::result::Result<tonic::Response<super::LocalInventory>, tonic::Status>;
        /// Deletes the specified `LocalInventory` from the given product in your
        /// merchant account. It might take a up to an hour for the
        /// `LocalInventory` to be deleted from the specific product.
        /// Once you have received a successful delete response, wait for that
        /// period before attempting a delete again.
        async fn delete_local_inventory(
            &self,
            request: tonic::Request<super::DeleteLocalInventoryRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
    }
    /// Service to manage local inventory for products
    #[derive(Debug)]
    pub struct LocalInventoryServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> LocalInventoryServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for LocalInventoryServiceServer<T>
    where
        T: LocalInventoryService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/google.shopping.merchant.inventories.v1beta.LocalInventoryService/ListLocalInventories" => {
                    #[allow(non_camel_case_types)]
                    struct ListLocalInventoriesSvc<T: LocalInventoryService>(pub Arc<T>);
                    impl<
                        T: LocalInventoryService,
                    > tonic::server::UnaryService<super::ListLocalInventoriesRequest>
                    for ListLocalInventoriesSvc<T> {
                        type Response = super::ListLocalInventoriesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListLocalInventoriesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LocalInventoryService>::list_local_inventories(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListLocalInventoriesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.shopping.merchant.inventories.v1beta.LocalInventoryService/InsertLocalInventory" => {
                    #[allow(non_camel_case_types)]
                    struct InsertLocalInventorySvc<T: LocalInventoryService>(pub Arc<T>);
                    impl<
                        T: LocalInventoryService,
                    > tonic::server::UnaryService<super::InsertLocalInventoryRequest>
                    for InsertLocalInventorySvc<T> {
                        type Response = super::LocalInventory;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InsertLocalInventoryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LocalInventoryService>::insert_local_inventory(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InsertLocalInventorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.shopping.merchant.inventories.v1beta.LocalInventoryService/DeleteLocalInventory" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteLocalInventorySvc<T: LocalInventoryService>(pub Arc<T>);
                    impl<
                        T: LocalInventoryService,
                    > tonic::server::UnaryService<super::DeleteLocalInventoryRequest>
                    for DeleteLocalInventorySvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteLocalInventoryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LocalInventoryService>::delete_local_inventory(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteLocalInventorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for LocalInventoryServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "google.shopping.merchant.inventories.v1beta.LocalInventoryService";
    impl<T> tonic::server::NamedService for LocalInventoryServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Regional inventory information for the product. Represents specific
/// information like price and availability for a given product in a specific
/// [`region`][google.shopping.merchant.inventories.v1beta.RegionalInventory.region].
/// For a list of all accepted attribute values, see the [regional product
/// inventory data
/// specification](<https://support.google.com/merchants/answer/9698880>).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegionalInventory {
    /// Output only. The name of the `RegionalInventory` resource.
    /// Format:
    /// `{regional_inventory.name=accounts/{account}/products/{product}/regionalInventories/{region}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The account that owns the product. This field will be ignored
    /// if set by the client.
    #[prost(int64, tag = "2")]
    pub account: i64,
    /// Required. Immutable. ID of the region for this
    /// `RegionalInventory` resource. See the [Regional availability and
    /// pricing](<https://support.google.com/merchants/answer/9698880>) for more
    /// details.
    #[prost(string, tag = "3")]
    pub region: ::prost::alloc::string::String,
    /// Price of the product in this region.
    #[prost(message, optional, tag = "4")]
    pub price: ::core::option::Option<super::super::super::r#type::Price>,
    /// Sale price of the product in this region. Mandatory if
    /// [`salePriceEffectiveDate`][google.shopping.merchant.inventories.v1beta.RegionalInventory.sale_price_effective_date]
    /// is defined.
    #[prost(message, optional, tag = "5")]
    pub sale_price: ::core::option::Option<super::super::super::r#type::Price>,
    /// The `TimePeriod` of the
    /// sale price in this region.
    #[prost(message, optional, tag = "6")]
    pub sale_price_effective_date: ::core::option::Option<
        super::super::super::super::r#type::Interval,
    >,
    /// Availability of the product in this region.
    /// For accepted attribute values, see the [regional product inventory data
    /// specification](<https://support.google.com/merchants/answer/3061342>)
    #[prost(string, optional, tag = "7")]
    pub availability: ::core::option::Option<::prost::alloc::string::String>,
    /// A list of custom (merchant-provided) attributes. You can also use
    /// `CustomAttribute` to submit any attribute of the data specification in its
    /// generic form.
    #[prost(message, repeated, tag = "8")]
    pub custom_attributes: ::prost::alloc::vec::Vec<
        super::super::super::r#type::CustomAttribute,
    >,
}
/// Request message for the `ListRegionalInventories` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRegionalInventoriesRequest {
    /// Required. The `name` of the parent product to list `RegionalInventory`
    /// resources for. Format: `accounts/{account}/products/{product}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of `RegionalInventory` resources for the given product
    /// to return. The service returns fewer than this value if the number of
    /// inventories for the given product is less that than the `pageSize`. The
    /// default value is 25000. The maximum value is 100000; If a value higher than
    /// the maximum is specified, then the `pageSize` will default to the maximum.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A page token, received from a previous `ListRegionalInventories` call.
    /// Provide the page token to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListRegionalInventories`
    /// must match the call that provided the page token. The token returned as
    /// [nextPageToken][google.shopping.merchant.inventories.v1beta.ListRegionalInventoriesResponse.next_page_token]
    /// in the response to the previous request.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
/// Response message for the `ListRegionalInventories` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRegionalInventoriesResponse {
    /// The `RegionalInventory` resources for the given product from the specified
    /// account.
    #[prost(message, repeated, tag = "1")]
    pub regional_inventories: ::prost::alloc::vec::Vec<RegionalInventory>,
    /// A token, which can be sent as `pageToken` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for the `InsertRegionalInventory` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertRegionalInventoryRequest {
    /// Required. The account and product where this inventory will be inserted.
    /// Format: `accounts/{account}/products/{product}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. Regional inventory information to add to the product. If the
    /// product already has a `RegionalInventory` resource for the same `region`,
    /// full replacement of the `RegionalInventory` resource is performed.
    #[prost(message, optional, tag = "2")]
    pub regional_inventory: ::core::option::Option<RegionalInventory>,
}
/// Request message for the `DeleteRegionalInventory` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRegionalInventoryRequest {
    /// Required. The name of the `RegionalInventory` resource to delete.
    /// Format:
    /// `accounts/{account}/products/{product}/regionalInventories/{region}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Generated server implementations.
pub mod regional_inventory_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RegionalInventoryServiceServer.
    #[async_trait]
    pub trait RegionalInventoryService: std::marker::Send + std::marker::Sync + 'static {
        /// Lists the `RegionalInventory` resources for the given product in your
        /// merchant account. The response might contain fewer items than specified by
        /// `pageSize`.  If `pageToken` was returned in previous request, it can be
        /// used to obtain additional results.
        ///
        /// `RegionalInventory` resources are listed per product for a given account.
        async fn list_regional_inventories(
            &self,
            request: tonic::Request<super::ListRegionalInventoriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListRegionalInventoriesResponse>,
            tonic::Status,
        >;
        /// Inserts a `RegionalInventory` to a given product in your
        /// merchant account.
        ///
        /// Replaces the full `RegionalInventory` resource if an entry with the same
        /// [`region`][google.shopping.merchant.inventories.v1beta.RegionalInventory.region]
        /// already exists for the product.
        ///
        /// It might take up to 30 minutes for the new or updated `RegionalInventory`
        /// resource to appear in products.
        async fn insert_regional_inventory(
            &self,
            request: tonic::Request<super::InsertRegionalInventoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegionalInventory>,
            tonic::Status,
        >;
        /// Deletes the specified `RegionalInventory` resource from the given product
        /// in your merchant account.  It might take up to an hour for the
        /// `RegionalInventory` to be deleted from the specific product.
        /// Once you have received a successful delete response, wait for that
        /// period before attempting a delete again.
        async fn delete_regional_inventory(
            &self,
            request: tonic::Request<super::DeleteRegionalInventoryRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
    }
    /// Service to manage regional inventory for products. There is also separate
    /// `regions` resource and API to manage regions definitions.
    #[derive(Debug)]
    pub struct RegionalInventoryServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> RegionalInventoryServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for RegionalInventoryServiceServer<T>
    where
        T: RegionalInventoryService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/google.shopping.merchant.inventories.v1beta.RegionalInventoryService/ListRegionalInventories" => {
                    #[allow(non_camel_case_types)]
                    struct ListRegionalInventoriesSvc<T: RegionalInventoryService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: RegionalInventoryService,
                    > tonic::server::UnaryService<super::ListRegionalInventoriesRequest>
                    for ListRegionalInventoriesSvc<T> {
                        type Response = super::ListRegionalInventoriesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ListRegionalInventoriesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RegionalInventoryService>::list_regional_inventories(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListRegionalInventoriesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.shopping.merchant.inventories.v1beta.RegionalInventoryService/InsertRegionalInventory" => {
                    #[allow(non_camel_case_types)]
                    struct InsertRegionalInventorySvc<T: RegionalInventoryService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: RegionalInventoryService,
                    > tonic::server::UnaryService<super::InsertRegionalInventoryRequest>
                    for InsertRegionalInventorySvc<T> {
                        type Response = super::RegionalInventory;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::InsertRegionalInventoryRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RegionalInventoryService>::insert_regional_inventory(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InsertRegionalInventorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.shopping.merchant.inventories.v1beta.RegionalInventoryService/DeleteRegionalInventory" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteRegionalInventorySvc<T: RegionalInventoryService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: RegionalInventoryService,
                    > tonic::server::UnaryService<super::DeleteRegionalInventoryRequest>
                    for DeleteRegionalInventorySvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::DeleteRegionalInventoryRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RegionalInventoryService>::delete_regional_inventory(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteRegionalInventorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for RegionalInventoryServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "google.shopping.merchant.inventories.v1beta.RegionalInventoryService";
    impl<T> tonic::server::NamedService for RegionalInventoryServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}

// This file is @generated by prost-build.
/// Request message for TablesService.GetTable.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTableRequest {
    /// Required. The name of the table to retrieve.
    /// Format: tables/{table}
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for TablesService.ListTables.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTablesRequest {
    /// The maximum number of tables to return. The service may return fewer than
    /// this value.
    ///
    /// If unspecified, at most 20 tables are returned. The maximum value is 100;
    /// values above 100 are coerced to 100.
    #[prost(int32, tag = "1")]
    pub page_size: i32,
    /// A page token, received from a previous `ListTables` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListTables` must match
    /// the call that provided the page token.
    #[prost(string, tag = "2")]
    pub page_token: ::prost::alloc::string::String,
}
/// Response message for TablesService.ListTables.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTablesResponse {
    /// The list of tables.
    #[prost(message, repeated, tag = "1")]
    pub tables: ::prost::alloc::vec::Vec<Table>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is empty, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for TablesService.GetWorkspace.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkspaceRequest {
    /// Required. The name of the workspace to retrieve.
    /// Format: workspaces/{workspace}
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for TablesService.ListWorkspaces.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkspacesRequest {
    /// The maximum number of workspaces to return. The service may return fewer
    /// than this value.
    ///
    /// If unspecified, at most 10 workspaces are returned. The maximum value is
    /// 25; values above 25 are coerced to 25.
    #[prost(int32, tag = "1")]
    pub page_size: i32,
    /// A page token, received from a previous `ListWorkspaces` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListWorkspaces` must
    /// match the call that provided the page token.
    #[prost(string, tag = "2")]
    pub page_token: ::prost::alloc::string::String,
}
/// Response message for TablesService.ListWorkspaces.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkspacesResponse {
    /// The list of workspaces.
    #[prost(message, repeated, tag = "1")]
    pub workspaces: ::prost::alloc::vec::Vec<Workspace>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is empty, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for TablesService.GetRow.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRowRequest {
    /// Required. The name of the row to retrieve.
    /// Format: tables/{table}/rows/{row}
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. Column key to use for values in the row.
    /// Defaults to user entered name.
    #[prost(enumeration = "View", tag = "2")]
    pub view: i32,
}
/// Request message for TablesService.ListRows.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRowsRequest {
    /// Required. The parent table.
    /// Format: tables/{table}
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of rows to return. The service may return fewer than
    /// this value.
    ///
    /// If unspecified, at most 50 rows are returned. The maximum value is 1,000;
    /// values above 1,000 are coerced to 1,000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A page token, received from a previous `ListRows` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListRows` must match
    /// the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Column key to use for values in the row.
    /// Defaults to user entered name.
    #[prost(enumeration = "View", tag = "4")]
    pub view: i32,
    /// Optional. Raw text query to search for in rows of the table.
    /// Special characters must be escaped. Logical operators and field specific
    /// filtering not supported.
    #[prost(string, tag = "5")]
    pub filter: ::prost::alloc::string::String,
}
/// Response message for TablesService.ListRows.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRowsResponse {
    /// The rows from the specified table.
    #[prost(message, repeated, tag = "1")]
    pub rows: ::prost::alloc::vec::Vec<Row>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is empty, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for TablesService.CreateRow.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateRowRequest {
    /// Required. The parent table where this row will be created.
    /// Format: tables/{table}
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The row to create.
    #[prost(message, optional, tag = "2")]
    pub row: ::core::option::Option<Row>,
    /// Optional. Column key to use for values in the row.
    /// Defaults to user entered name.
    #[prost(enumeration = "View", tag = "3")]
    pub view: i32,
}
/// Request message for TablesService.BatchCreateRows.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCreateRowsRequest {
    /// Required. The parent table where the rows will be created.
    /// Format: tables/{table}
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The request message specifying the rows to create.
    ///
    /// A maximum of 500 rows can be created in a single batch.
    #[prost(message, repeated, tag = "2")]
    pub requests: ::prost::alloc::vec::Vec<CreateRowRequest>,
}
/// Response message for TablesService.BatchCreateRows.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCreateRowsResponse {
    /// The created rows.
    #[prost(message, repeated, tag = "1")]
    pub rows: ::prost::alloc::vec::Vec<Row>,
}
/// Request message for TablesService.UpdateRow.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRowRequest {
    /// Required. The row to update.
    #[prost(message, optional, tag = "1")]
    pub row: ::core::option::Option<Row>,
    /// The list of fields to update.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Optional. Column key to use for values in the row.
    /// Defaults to user entered name.
    #[prost(enumeration = "View", tag = "3")]
    pub view: i32,
}
/// Request message for TablesService.BatchUpdateRows.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchUpdateRowsRequest {
    /// Required. The parent table shared by all rows being updated.
    /// Format: tables/{table}
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The request messages specifying the rows to update.
    ///
    /// A maximum of 500 rows can be modified in a single batch.
    #[prost(message, repeated, tag = "2")]
    pub requests: ::prost::alloc::vec::Vec<UpdateRowRequest>,
}
/// Response message for TablesService.BatchUpdateRows.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchUpdateRowsResponse {
    /// The updated rows.
    #[prost(message, repeated, tag = "1")]
    pub rows: ::prost::alloc::vec::Vec<Row>,
}
/// Request message for TablesService.DeleteRow
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRowRequest {
    /// Required. The name of the row to delete.
    /// Format: tables/{table}/rows/{row}
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for TablesService.BatchDeleteRows
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchDeleteRowsRequest {
    /// Required. The parent table shared by all rows being deleted.
    /// Format: tables/{table}
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The names of the rows to delete. All rows must belong to the parent table
    /// or else the entire batch will fail. A maximum of 500 rows can be deleted
    /// in a batch.
    /// Format: tables/{table}/rows/{row}
    #[prost(string, repeated, tag = "2")]
    pub names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// A single table.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Table {
    /// The resource name of the table.
    /// Table names have the form `tables/{table}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The human readable title of the table.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// List of columns in this table.
    /// Order of columns matches the display order.
    #[prost(message, repeated, tag = "3")]
    pub columns: ::prost::alloc::vec::Vec<ColumnDescription>,
}
/// Details on a column in the table.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ColumnDescription {
    /// column name
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Data type of the column
    /// Supported types are auto_id, boolean, boolean_list, creator,
    /// create_timestamp, date, dropdown, location, integer,
    /// integer_list, number, number_list, person, person_list, tags, check_list,
    /// text, text_list, update_timestamp, updater, relationship,
    /// file_attachment_list.
    /// These types directly map to the column types supported on Tables website.
    #[prost(string, tag = "2")]
    pub data_type: ::prost::alloc::string::String,
    /// Internal id for a column.
    #[prost(string, tag = "3")]
    pub id: ::prost::alloc::string::String,
    /// Optional. Range of labeled values for the column.
    /// Some columns like tags and drop-downs limit the values to a set of
    /// possible values. We return the range of values in such cases to help
    /// clients implement better user data validation.
    #[prost(message, repeated, tag = "4")]
    pub labels: ::prost::alloc::vec::Vec<LabeledItem>,
    /// Optional. Additional details about a relationship column. Specified when data_type
    /// is relationship.
    #[prost(message, optional, tag = "5")]
    pub relationship_details: ::core::option::Option<RelationshipDetails>,
    /// Optional. Indicates that this is a lookup column whose value is derived from the
    /// relationship column specified in the details. Lookup columns can not be
    /// updated directly. To change the value you must update the associated
    /// relationship column.
    #[prost(message, optional, tag = "6")]
    pub lookup_details: ::core::option::Option<LookupDetails>,
}
/// A single item in a labeled column.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LabeledItem {
    /// Display string as entered by user.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Internal id associated with the item.
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
}
/// Details about a relationship column.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelationshipDetails {
    /// The name of the table this relationship is linked to.
    #[prost(string, tag = "1")]
    pub linked_table: ::prost::alloc::string::String,
}
/// Details about a lookup column whose value comes from the associated
/// relationship.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupDetails {
    /// The name of the relationship column associated with the lookup.
    #[prost(string, tag = "1")]
    pub relationship_column: ::prost::alloc::string::String,
    /// The id of the relationship column.
    #[prost(string, tag = "2")]
    pub relationship_column_id: ::prost::alloc::string::String,
}
/// A single row in a table.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Row {
    /// The resource name of the row.
    /// Row names have the form `tables/{table}/rows/{row}`.
    /// The name is ignored when creating a row.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The values of the row. This is a map of column key to value.
    /// Key is user entered name(default) or the internal column id based on
    /// the view in the request.
    #[prost(map = "string, message", tag = "2")]
    pub values: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost_types::Value,
    >,
}
/// A single workspace.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Workspace {
    /// The resource name of the workspace.
    /// Workspace names have the form `workspaces/{workspace}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The human readable title of the workspace.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// The list of tables in the workspace.
    #[prost(message, repeated, tag = "3")]
    pub tables: ::prost::alloc::vec::Vec<Table>,
}
/// Column identifier used for the values in the row.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum View {
    /// Defaults to user entered text.
    Unspecified = 0,
    /// Uses internally generated column id to identify values.
    ColumnIdView = 1,
}
impl View {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "VIEW_UNSPECIFIED",
            Self::ColumnIdView => "COLUMN_ID_VIEW",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VIEW_UNSPECIFIED" => Some(Self::Unspecified),
            "COLUMN_ID_VIEW" => Some(Self::ColumnIdView),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod tables_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TablesServiceServer.
    #[async_trait]
    pub trait TablesService: std::marker::Send + std::marker::Sync + 'static {
        /// Gets a table. Returns NOT_FOUND if the table does not exist.
        async fn get_table(
            &self,
            request: tonic::Request<super::GetTableRequest>,
        ) -> std::result::Result<tonic::Response<super::Table>, tonic::Status>;
        /// Lists tables for the user.
        async fn list_tables(
            &self,
            request: tonic::Request<super::ListTablesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListTablesResponse>,
            tonic::Status,
        >;
        /// Gets a workspace. Returns NOT_FOUND if the workspace does not exist.
        async fn get_workspace(
            &self,
            request: tonic::Request<super::GetWorkspaceRequest>,
        ) -> std::result::Result<tonic::Response<super::Workspace>, tonic::Status>;
        /// Lists workspaces for the user.
        async fn list_workspaces(
            &self,
            request: tonic::Request<super::ListWorkspacesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListWorkspacesResponse>,
            tonic::Status,
        >;
        /// Gets a row. Returns NOT_FOUND if the row does not exist in the table.
        async fn get_row(
            &self,
            request: tonic::Request<super::GetRowRequest>,
        ) -> std::result::Result<tonic::Response<super::Row>, tonic::Status>;
        /// Lists rows in a table. Returns NOT_FOUND if the table does not exist.
        async fn list_rows(
            &self,
            request: tonic::Request<super::ListRowsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListRowsResponse>,
            tonic::Status,
        >;
        /// Creates a row.
        async fn create_row(
            &self,
            request: tonic::Request<super::CreateRowRequest>,
        ) -> std::result::Result<tonic::Response<super::Row>, tonic::Status>;
        /// Creates multiple rows.
        async fn batch_create_rows(
            &self,
            request: tonic::Request<super::BatchCreateRowsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchCreateRowsResponse>,
            tonic::Status,
        >;
        /// Updates a row.
        async fn update_row(
            &self,
            request: tonic::Request<super::UpdateRowRequest>,
        ) -> std::result::Result<tonic::Response<super::Row>, tonic::Status>;
        /// Updates multiple rows.
        async fn batch_update_rows(
            &self,
            request: tonic::Request<super::BatchUpdateRowsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchUpdateRowsResponse>,
            tonic::Status,
        >;
        /// Deletes a row.
        async fn delete_row(
            &self,
            request: tonic::Request<super::DeleteRowRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// Deletes multiple rows.
        async fn batch_delete_rows(
            &self,
            request: tonic::Request<super::BatchDeleteRowsRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
    }
    /// The Tables Service provides an API for reading and updating tables.
    /// It defines the following resource model:
    ///
    /// - The API has a collection of [Table][google.area120.tables.v1alpha1.Table]
    ///   resources, named `tables/*`
    ///
    /// - Each Table has a collection of [Row][google.area120.tables.v1alpha1.Row]
    ///   resources, named `tables/*/rows/*`
    ///
    /// - The API has a collection of
    ///   [Workspace][google.area120.tables.v1alpha1.Workspace]
    ///   resources, named `workspaces/*`.
    #[derive(Debug)]
    pub struct TablesServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> TablesServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TablesServiceServer<T>
    where
        T: TablesService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/google.area120.tables.v1alpha1.TablesService/GetTable" => {
                    #[allow(non_camel_case_types)]
                    struct GetTableSvc<T: TablesService>(pub Arc<T>);
                    impl<
                        T: TablesService,
                    > tonic::server::UnaryService<super::GetTableRequest>
                    for GetTableSvc<T> {
                        type Response = super::Table;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTableRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TablesService>::get_table(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTableSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.area120.tables.v1alpha1.TablesService/ListTables" => {
                    #[allow(non_camel_case_types)]
                    struct ListTablesSvc<T: TablesService>(pub Arc<T>);
                    impl<
                        T: TablesService,
                    > tonic::server::UnaryService<super::ListTablesRequest>
                    for ListTablesSvc<T> {
                        type Response = super::ListTablesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListTablesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TablesService>::list_tables(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListTablesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.area120.tables.v1alpha1.TablesService/GetWorkspace" => {
                    #[allow(non_camel_case_types)]
                    struct GetWorkspaceSvc<T: TablesService>(pub Arc<T>);
                    impl<
                        T: TablesService,
                    > tonic::server::UnaryService<super::GetWorkspaceRequest>
                    for GetWorkspaceSvc<T> {
                        type Response = super::Workspace;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetWorkspaceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TablesService>::get_workspace(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetWorkspaceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.area120.tables.v1alpha1.TablesService/ListWorkspaces" => {
                    #[allow(non_camel_case_types)]
                    struct ListWorkspacesSvc<T: TablesService>(pub Arc<T>);
                    impl<
                        T: TablesService,
                    > tonic::server::UnaryService<super::ListWorkspacesRequest>
                    for ListWorkspacesSvc<T> {
                        type Response = super::ListWorkspacesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListWorkspacesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TablesService>::list_workspaces(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListWorkspacesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.area120.tables.v1alpha1.TablesService/GetRow" => {
                    #[allow(non_camel_case_types)]
                    struct GetRowSvc<T: TablesService>(pub Arc<T>);
                    impl<
                        T: TablesService,
                    > tonic::server::UnaryService<super::GetRowRequest>
                    for GetRowSvc<T> {
                        type Response = super::Row;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRowRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TablesService>::get_row(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetRowSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.area120.tables.v1alpha1.TablesService/ListRows" => {
                    #[allow(non_camel_case_types)]
                    struct ListRowsSvc<T: TablesService>(pub Arc<T>);
                    impl<
                        T: TablesService,
                    > tonic::server::UnaryService<super::ListRowsRequest>
                    for ListRowsSvc<T> {
                        type Response = super::ListRowsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListRowsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TablesService>::list_rows(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListRowsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.area120.tables.v1alpha1.TablesService/CreateRow" => {
                    #[allow(non_camel_case_types)]
                    struct CreateRowSvc<T: TablesService>(pub Arc<T>);
                    impl<
                        T: TablesService,
                    > tonic::server::UnaryService<super::CreateRowRequest>
                    for CreateRowSvc<T> {
                        type Response = super::Row;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateRowRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TablesService>::create_row(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateRowSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.area120.tables.v1alpha1.TablesService/BatchCreateRows" => {
                    #[allow(non_camel_case_types)]
                    struct BatchCreateRowsSvc<T: TablesService>(pub Arc<T>);
                    impl<
                        T: TablesService,
                    > tonic::server::UnaryService<super::BatchCreateRowsRequest>
                    for BatchCreateRowsSvc<T> {
                        type Response = super::BatchCreateRowsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchCreateRowsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TablesService>::batch_create_rows(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BatchCreateRowsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.area120.tables.v1alpha1.TablesService/UpdateRow" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateRowSvc<T: TablesService>(pub Arc<T>);
                    impl<
                        T: TablesService,
                    > tonic::server::UnaryService<super::UpdateRowRequest>
                    for UpdateRowSvc<T> {
                        type Response = super::Row;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateRowRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TablesService>::update_row(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateRowSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.area120.tables.v1alpha1.TablesService/BatchUpdateRows" => {
                    #[allow(non_camel_case_types)]
                    struct BatchUpdateRowsSvc<T: TablesService>(pub Arc<T>);
                    impl<
                        T: TablesService,
                    > tonic::server::UnaryService<super::BatchUpdateRowsRequest>
                    for BatchUpdateRowsSvc<T> {
                        type Response = super::BatchUpdateRowsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchUpdateRowsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TablesService>::batch_update_rows(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BatchUpdateRowsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.area120.tables.v1alpha1.TablesService/DeleteRow" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteRowSvc<T: TablesService>(pub Arc<T>);
                    impl<
                        T: TablesService,
                    > tonic::server::UnaryService<super::DeleteRowRequest>
                    for DeleteRowSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteRowRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TablesService>::delete_row(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteRowSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.area120.tables.v1alpha1.TablesService/BatchDeleteRows" => {
                    #[allow(non_camel_case_types)]
                    struct BatchDeleteRowsSvc<T: TablesService>(pub Arc<T>);
                    impl<
                        T: TablesService,
                    > tonic::server::UnaryService<super::BatchDeleteRowsRequest>
                    for BatchDeleteRowsSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchDeleteRowsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TablesService>::batch_delete_rows(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BatchDeleteRowsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for TablesServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "google.area120.tables.v1alpha1.TablesService";
    impl<T> tonic::server::NamedService for TablesServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}

// This file is @generated by prost-build.
/// An object that encapsulates all of the data about a video.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Video {
    /// A mapping of media types to their URIs.
    /// This field is only included for `ACTIVE` videos.
    /// The key is an enum value from `MediaFormat`.
    #[prost(map = "string, message", tag = "1")]
    pub uris: ::std::collections::HashMap<::prost::alloc::string::String, Uris>,
    /// Current state of the render request.
    #[prost(enumeration = "video::State", tag = "2")]
    pub state: i32,
    /// Contains the video's metadata, only set if the state is `ACTIVE`.
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<VideoMetadata>,
}
/// Nested message and enum types in `Video`.
pub mod video {
    /// The different states a video can be in.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// The video is currently processing.
        Processing = 1,
        /// The video has finished rendering, and can be viewed through
        /// `LookupVideo`.
        Active = 2,
        /// The video has failed to render.
        Failed = 3,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::Processing => "PROCESSING",
                State::Active => "ACTIVE",
                State::Failed => "FAILED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "PROCESSING" => Some(Self::Processing),
                "ACTIVE" => Some(Self::Active),
                "FAILED" => Some(Self::Failed),
                _ => None,
            }
        }
    }
}
/// Contains all the uris for a given video format.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Uris {
    /// A signed short-lived URI for the media in a landscape orientation.
    #[prost(string, tag = "1")]
    pub landscape_uri: ::prost::alloc::string::String,
    /// A signed short-lived URI for the media in a portrait orientation.
    #[prost(string, tag = "2")]
    pub portrait_uri: ::prost::alloc::string::String,
}
/// Contains metadata about a video, such as its videoId and duration.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoMetadata {
    /// An ID for the video, and the recommended way to retrieve a video.
    #[prost(string, tag = "1")]
    pub video_id: ::prost::alloc::string::String,
    /// The date at which the imagery used in the video was captured.
    /// This will be at a month-level granularity.
    #[prost(message, optional, tag = "2")]
    pub capture_date: ::core::option::Option<super::super::super::r#type::Date>,
    /// The length of the video.
    #[prost(message, optional, tag = "3")]
    pub duration: ::core::option::Option<::prost_types::Duration>,
}
/// Request message for `AerialView.RenderVideo`.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenderVideoRequest {
    /// Required. A US postal address for the location to be rendered in the video.
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
/// Response message for `AerialView.RenderVideo`.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenderVideoResponse {
    /// Current state of the render request.
    #[prost(enumeration = "video::State", tag = "1")]
    pub state: i32,
    /// Contains the video's metadata, only set if the state is `ACTIVE`.
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<VideoMetadata>,
}
/// Request message for `AerialView.LookupVideo`.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupVideoRequest {
    /// Required.
    /// A key used to look-up a video.
    #[prost(oneof = "lookup_video_request::Key", tags = "1, 2")]
    pub key: ::core::option::Option<lookup_video_request::Key>,
}
/// Nested message and enum types in `LookupVideoRequest`.
pub mod lookup_video_request {
    /// Required.
    /// A key used to look-up a video.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Key {
        /// An ID returned from `RenderVideo`.
        #[prost(string, tag = "1")]
        VideoId(::prost::alloc::string::String),
        /// A US postal address.
        #[prost(string, tag = "2")]
        Address(::prost::alloc::string::String),
    }
}
/// Generated server implementations.
pub mod aerial_view_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AerialViewServer.
    #[async_trait]
    pub trait AerialView: Send + Sync + 'static {
        /// Adds an address to the renderer's queue if a video hasn't already been
        /// rendered. Otherwise, returns metadata about the video.
        async fn render_video(
            &self,
            request: tonic::Request<super::RenderVideoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RenderVideoResponse>,
            tonic::Status,
        >;
        /// Fetches a video given its address or videoId. The response will either be
        /// a video with a set of playback URIs for ACTIVE videos, a PROCESSING state
        /// for pending videos, or a 404 error if the video does not exist. Receiving a
        /// video is a billable event, so callers of this method should be ready to use
        /// the returned URIs at the time of request.
        async fn lookup_video(
            &self,
            request: tonic::Request<super::LookupVideoRequest>,
        ) -> std::result::Result<tonic::Response<super::Video>, tonic::Status>;
    }
    /// Service definition for the Aerial View API.
    #[derive(Debug)]
    pub struct AerialViewServer<T: AerialView> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: AerialView> AerialViewServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for AerialViewServer<T>
    where
        T: AerialView,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/google.maps.aerialview.v1.AerialView/RenderVideo" => {
                    #[allow(non_camel_case_types)]
                    struct RenderVideoSvc<T: AerialView>(pub Arc<T>);
                    impl<
                        T: AerialView,
                    > tonic::server::UnaryService<super::RenderVideoRequest>
                    for RenderVideoSvc<T> {
                        type Response = super::RenderVideoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RenderVideoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AerialView>::render_video(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RenderVideoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.maps.aerialview.v1.AerialView/LookupVideo" => {
                    #[allow(non_camel_case_types)]
                    struct LookupVideoSvc<T: AerialView>(pub Arc<T>);
                    impl<
                        T: AerialView,
                    > tonic::server::UnaryService<super::LookupVideoRequest>
                    for LookupVideoSvc<T> {
                        type Response = super::Video;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LookupVideoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AerialView>::lookup_video(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = LookupVideoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: AerialView> Clone for AerialViewServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: AerialView> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: AerialView> tonic::server::NamedService for AerialViewServer<T> {
        const NAME: &'static str = "google.maps.aerialview.v1.AerialView";
    }
}

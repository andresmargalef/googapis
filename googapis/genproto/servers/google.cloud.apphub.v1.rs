// This file is @generated by prost-build.
/// Consumer provided attributes.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Attributes {
    /// Optional. User-defined criticality information.
    #[prost(message, optional, tag = "1")]
    pub criticality: ::core::option::Option<Criticality>,
    /// Optional. User-defined environment information.
    #[prost(message, optional, tag = "2")]
    pub environment: ::core::option::Option<Environment>,
    /// Optional. Developer team that owns development and coding.
    #[prost(message, repeated, tag = "3")]
    pub developer_owners: ::prost::alloc::vec::Vec<ContactInfo>,
    /// Optional. Operator team that ensures runtime and operations.
    #[prost(message, repeated, tag = "4")]
    pub operator_owners: ::prost::alloc::vec::Vec<ContactInfo>,
    /// Optional. Business team that ensures user needs are met and value is
    /// delivered
    #[prost(message, repeated, tag = "5")]
    pub business_owners: ::prost::alloc::vec::Vec<ContactInfo>,
}
/// Criticality of the Application, Service, or Workload
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Criticality {
    /// Required. Criticality Type.
    #[prost(enumeration = "criticality::Type", tag = "3")]
    pub r#type: i32,
}
/// Nested message and enum types in `Criticality`.
pub mod criticality {
    /// Criticality Type.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Type {
        /// Unspecified type.
        Unspecified = 0,
        /// Mission critical service, application or workload.
        MissionCritical = 1,
        /// High impact.
        High = 2,
        /// Medium impact.
        Medium = 3,
        /// Low impact.
        Low = 4,
    }
    impl Type {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "TYPE_UNSPECIFIED",
                Self::MissionCritical => "MISSION_CRITICAL",
                Self::High => "HIGH",
                Self::Medium => "MEDIUM",
                Self::Low => "LOW",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "MISSION_CRITICAL" => Some(Self::MissionCritical),
                "HIGH" => Some(Self::High),
                "MEDIUM" => Some(Self::Medium),
                "LOW" => Some(Self::Low),
                _ => None,
            }
        }
    }
}
/// Environment of the Application, Service, or Workload
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Environment {
    /// Required. Environment Type.
    #[prost(enumeration = "environment::Type", tag = "2")]
    pub r#type: i32,
}
/// Nested message and enum types in `Environment`.
pub mod environment {
    /// Environment Type.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Type {
        /// Unspecified type.
        Unspecified = 0,
        /// Production environment.
        Production = 1,
        /// Staging environment.
        Staging = 2,
        /// Test environment.
        Test = 3,
        /// Development environment.
        Development = 4,
    }
    impl Type {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "TYPE_UNSPECIFIED",
                Self::Production => "PRODUCTION",
                Self::Staging => "STAGING",
                Self::Test => "TEST",
                Self::Development => "DEVELOPMENT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "PRODUCTION" => Some(Self::Production),
                "STAGING" => Some(Self::Staging),
                "TEST" => Some(Self::Test),
                "DEVELOPMENT" => Some(Self::Development),
                _ => None,
            }
        }
    }
}
/// Contact information of stakeholders.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContactInfo {
    /// Optional. Contact's name.
    /// Can have a maximum length of 63 characters.
    #[prost(string, tag = "1")]
    pub display_name: ::prost::alloc::string::String,
    /// Required. Email address of the contacts.
    #[prost(string, tag = "2")]
    pub email: ::prost::alloc::string::String,
}
/// Application defines the governance boundary for App Hub Entities that
/// perform a logical end-to-end business function.
/// App Hub supports application level IAM permission to align with governance
/// requirements.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Application {
    /// Identifier. The resource name of an Application. Format:
    /// "projects/{host-project-id}/locations/{location}/applications/{application-id}"
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. User-defined name for the Application.
    /// Can have a maximum length of 63 characters.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// Optional. User-defined description of an Application.
    /// Can have a maximum length of 2048 characters.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Optional. Consumer provided attributes.
    #[prost(message, optional, tag = "4")]
    pub attributes: ::core::option::Option<Attributes>,
    /// Output only. Create time.
    #[prost(message, optional, tag = "5")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Update time.
    #[prost(message, optional, tag = "6")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Required. Immutable. Defines what data can be included into this
    /// Application. Limits which Services and Workloads can be registered.
    #[prost(message, optional, tag = "9")]
    pub scope: ::core::option::Option<Scope>,
    /// Output only. A universally unique identifier (in UUID4 format) for the
    /// `Application`.
    #[prost(string, tag = "10")]
    pub uid: ::prost::alloc::string::String,
    /// Output only. Application state.
    #[prost(enumeration = "application::State", tag = "11")]
    pub state: i32,
}
/// Nested message and enum types in `Application`.
pub mod application {
    /// Application state.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// Unspecified state.
        Unspecified = 0,
        /// The Application is being created.
        Creating = 1,
        /// The Application is ready to register Services and Workloads.
        Active = 2,
        /// The Application is being deleted.
        Deleting = 3,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Creating => "CREATING",
                Self::Active => "ACTIVE",
                Self::Deleting => "DELETING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "CREATING" => Some(Self::Creating),
                "ACTIVE" => Some(Self::Active),
                "DELETING" => Some(Self::Deleting),
                _ => None,
            }
        }
    }
}
/// Scope of an application.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Scope {
    /// Required. Scope Type.
    #[prost(enumeration = "scope::Type", tag = "1")]
    pub r#type: i32,
}
/// Nested message and enum types in `Scope`.
pub mod scope {
    /// Scope Type.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Type {
        /// Unspecified type.
        Unspecified = 0,
        /// Regional type.
        Regional = 1,
    }
    impl Type {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "TYPE_UNSPECIFIED",
                Self::Regional => "REGIONAL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "REGIONAL" => Some(Self::Regional),
                _ => None,
            }
        }
    }
}
/// Service is an App Hub data model that contains a discovered service, which
/// represents a network/api interface that exposes some functionality to clients
/// for consumption over the network.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Service {
    /// Identifier. The resource name of a Service. Format:
    /// "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. User-defined name for the Service.
    /// Can have a maximum length of 63 characters.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// Optional. User-defined description of a Service.
    /// Can have a maximum length of 2048 characters.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Output only. Reference to an underlying networking resource that can
    /// comprise a Service. These are immutable.
    #[prost(message, optional, tag = "4")]
    pub service_reference: ::core::option::Option<ServiceReference>,
    /// Output only. Properties of an underlying compute resource that can comprise
    /// a Service. These are immutable.
    #[prost(message, optional, tag = "5")]
    pub service_properties: ::core::option::Option<ServiceProperties>,
    /// Optional. Consumer provided attributes.
    #[prost(message, optional, tag = "6")]
    pub attributes: ::core::option::Option<Attributes>,
    /// Required. Immutable. The resource name of the original discovered service.
    #[prost(string, tag = "7")]
    pub discovered_service: ::prost::alloc::string::String,
    /// Output only. Create time.
    #[prost(message, optional, tag = "8")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Update time.
    #[prost(message, optional, tag = "9")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. A universally unique identifier (UUID) for the `Service` in
    /// the UUID4 format.
    #[prost(string, tag = "10")]
    pub uid: ::prost::alloc::string::String,
    /// Output only. Service state.
    #[prost(enumeration = "service::State", tag = "11")]
    pub state: i32,
}
/// Nested message and enum types in `Service`.
pub mod service {
    /// Service state.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// Unspecified state.
        Unspecified = 0,
        /// The service is being created.
        Creating = 1,
        /// The service is ready.
        Active = 2,
        /// The service is being deleted.
        Deleting = 3,
        /// The underlying networking resources have been deleted.
        Detached = 4,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Creating => "CREATING",
                Self::Active => "ACTIVE",
                Self::Deleting => "DELETING",
                Self::Detached => "DETACHED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "CREATING" => Some(Self::Creating),
                "ACTIVE" => Some(Self::Active),
                "DELETING" => Some(Self::Deleting),
                "DETACHED" => Some(Self::Detached),
                _ => None,
            }
        }
    }
}
/// Reference to an underlying networking resource that can comprise a Service.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceReference {
    /// Output only. The underlying resource URI (For example, URI of Forwarding
    /// Rule, URL Map, and Backend Service).
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
}
/// Properties of an underlying cloud resource that can comprise a Service.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceProperties {
    /// Output only. The service project identifier that the underlying cloud
    /// resource resides in.
    #[prost(string, tag = "1")]
    pub gcp_project: ::prost::alloc::string::String,
    /// Output only. The location that the underlying resource resides in, for
    /// example, us-west1.
    #[prost(string, tag = "2")]
    pub location: ::prost::alloc::string::String,
    /// Output only. The location that the underlying resource resides in if it is
    /// zonal, for example, us-west1-a).
    #[prost(string, tag = "3")]
    pub zone: ::prost::alloc::string::String,
}
/// DiscoveredService is a network/api interface that exposes some functionality
/// to clients for consumption over the network. A discovered service can be
/// registered to a App Hub service.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiscoveredService {
    /// Identifier. The resource name of the discovered service. Format:
    /// "projects/{host-project-id}/locations/{location}/discoveredServices/{uuid}""
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. Reference to an underlying networking resource that can
    /// comprise a Service. These are immutable.
    #[prost(message, optional, tag = "2")]
    pub service_reference: ::core::option::Option<ServiceReference>,
    /// Output only. Properties of an underlying compute resource that can comprise
    /// a Service. These are immutable.
    #[prost(message, optional, tag = "3")]
    pub service_properties: ::core::option::Option<ServiceProperties>,
}
/// ServiceProjectAttachment represents an attachment from a service project to a
/// host project. Service projects contain the underlying cloud
/// infrastructure resources, and expose these resources to the host project
/// through a ServiceProjectAttachment. With the attachments, the host project
/// can provide an aggregated view of resources across all service projects.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceProjectAttachment {
    /// Identifier. The resource name of a ServiceProjectAttachment. Format:
    /// "projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}."
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Required. Immutable. Service project name in the format: "projects/abc" or
    /// "projects/123". As input, project name with either project id or number are
    /// accepted. As output, this field will contain project number.
    #[prost(string, tag = "2")]
    pub service_project: ::prost::alloc::string::String,
    /// Output only. Create time.
    #[prost(message, optional, tag = "3")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. A globally unique identifier (in UUID4 format) for the
    /// `ServiceProjectAttachment`.
    #[prost(string, tag = "4")]
    pub uid: ::prost::alloc::string::String,
    /// Output only. ServiceProjectAttachment state.
    #[prost(enumeration = "service_project_attachment::State", tag = "5")]
    pub state: i32,
}
/// Nested message and enum types in `ServiceProjectAttachment`.
pub mod service_project_attachment {
    /// ServiceProjectAttachment state.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// Unspecified state.
        Unspecified = 0,
        /// The ServiceProjectAttachment is being created.
        Creating = 1,
        /// The ServiceProjectAttachment is ready.
        /// This means Services and Workloads under the corresponding
        /// ServiceProjectAttachment is ready for registration.
        Active = 2,
        /// The ServiceProjectAttachment is being deleted.
        Deleting = 3,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Creating => "CREATING",
                Self::Active => "ACTIVE",
                Self::Deleting => "DELETING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "CREATING" => Some(Self::Creating),
                "ACTIVE" => Some(Self::Active),
                "DELETING" => Some(Self::Deleting),
                _ => None,
            }
        }
    }
}
/// Workload is an App Hub data model that contains a discovered workload, which
/// represents a binary deployment (such as managed instance groups (MIGs) and
/// GKE deployments) that performs the smallest logical subset of business
/// functionality.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Workload {
    /// Identifier. The resource name of the Workload. Format:
    /// "projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. User-defined name for the Workload.
    /// Can have a maximum length of 63 characters.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// Optional. User-defined description of a Workload.
    /// Can have a maximum length of 2048 characters.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Output only. Reference of an underlying compute resource represented by the
    /// Workload. These are immutable.
    #[prost(message, optional, tag = "4")]
    pub workload_reference: ::core::option::Option<WorkloadReference>,
    /// Output only. Properties of an underlying compute resource represented by
    /// the Workload. These are immutable.
    #[prost(message, optional, tag = "5")]
    pub workload_properties: ::core::option::Option<WorkloadProperties>,
    /// Required. Immutable. The resource name of the original discovered workload.
    #[prost(string, tag = "6")]
    pub discovered_workload: ::prost::alloc::string::String,
    /// Optional. Consumer provided attributes.
    #[prost(message, optional, tag = "7")]
    pub attributes: ::core::option::Option<Attributes>,
    /// Output only. Create time.
    #[prost(message, optional, tag = "8")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Update time.
    #[prost(message, optional, tag = "9")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. A universally unique identifier (UUID) for the `Workload` in
    /// the UUID4 format.
    #[prost(string, tag = "10")]
    pub uid: ::prost::alloc::string::String,
    /// Output only. Workload state.
    #[prost(enumeration = "workload::State", tag = "11")]
    pub state: i32,
}
/// Nested message and enum types in `Workload`.
pub mod workload {
    /// Workload state.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// Unspecified state.
        Unspecified = 0,
        /// The Workload is being created.
        Creating = 1,
        /// The Workload is ready.
        Active = 2,
        /// The Workload is being deleted.
        Deleting = 3,
        /// The underlying compute resources have been deleted.
        Detached = 4,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Creating => "CREATING",
                Self::Active => "ACTIVE",
                Self::Deleting => "DELETING",
                Self::Detached => "DETACHED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "CREATING" => Some(Self::Creating),
                "ACTIVE" => Some(Self::Active),
                "DELETING" => Some(Self::Deleting),
                "DETACHED" => Some(Self::Detached),
                _ => None,
            }
        }
    }
}
/// Reference of an underlying compute resource represented by the Workload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkloadReference {
    /// Output only. The underlying compute resource uri.
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
}
/// Properties of an underlying compute resource represented by the Workload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkloadProperties {
    /// Output only. The service project identifier that the underlying cloud
    /// resource resides in. Empty for non cloud resources.
    #[prost(string, tag = "1")]
    pub gcp_project: ::prost::alloc::string::String,
    /// Output only. The location that the underlying compute resource resides in
    /// (e.g us-west1).
    #[prost(string, tag = "2")]
    pub location: ::prost::alloc::string::String,
    /// Output only. The location that the underlying compute resource resides in
    /// if it is zonal (e.g us-west1-a).
    #[prost(string, tag = "3")]
    pub zone: ::prost::alloc::string::String,
}
/// DiscoveredWorkload is a binary deployment (such as managed instance groups
/// (MIGs) and GKE deployments) that performs the smallest logical subset of
/// business functionality. A discovered workload can be registered to an App Hub
/// Workload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiscoveredWorkload {
    /// Identifier. The resource name of the discovered workload. Format:
    /// "projects/{host-project-id}/locations/{location}/discoveredWorkloads/{uuid}"
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. Reference of an underlying compute resource represented by the
    /// Workload. These are immutable.
    #[prost(message, optional, tag = "2")]
    pub workload_reference: ::core::option::Option<WorkloadReference>,
    /// Output only. Properties of an underlying compute resource represented by
    /// the Workload. These are immutable.
    #[prost(message, optional, tag = "3")]
    pub workload_properties: ::core::option::Option<WorkloadProperties>,
}
/// Request for LookupServiceProjectAttachment.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupServiceProjectAttachmentRequest {
    /// Required. Service project ID and location to lookup service project
    /// attachment for. Only global location is supported. Expected format:
    /// `projects/{project}/locations/{location}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Response for LookupServiceProjectAttachment.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupServiceProjectAttachmentResponse {
    /// Service project attachment for a project if exists, empty otherwise.
    #[prost(message, optional, tag = "1")]
    pub service_project_attachment: ::core::option::Option<ServiceProjectAttachment>,
}
/// Request for ListServiceProjectAttachments.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListServiceProjectAttachmentsRequest {
    /// Required. Host project ID and location to list service project attachments.
    /// Only global location is supported. Expected format:
    /// `projects/{project}/locations/{location}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results.
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results.
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Response for ListServiceProjectAttachments.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListServiceProjectAttachmentsResponse {
    /// List of service project attachments.
    #[prost(message, repeated, tag = "1")]
    pub service_project_attachments: ::prost::alloc::vec::Vec<ServiceProjectAttachment>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Request for CreateServiceProjectAttachment.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateServiceProjectAttachmentRequest {
    /// Required. Host project ID and location to which service project is being
    /// attached. Only global location is supported. Expected format:
    /// `projects/{project}/locations/{location}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The service project attachment identifier must contain the
    /// project id of the service project specified in the
    /// service_project_attachment.service_project field.
    #[prost(string, tag = "2")]
    pub service_project_attachment_id: ::prost::alloc::string::String,
    /// Required. The resource being created.
    #[prost(message, optional, tag = "3")]
    pub service_project_attachment: ::core::option::Option<ServiceProjectAttachment>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request for GetServiceProjectAttachment.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetServiceProjectAttachmentRequest {
    /// Required. Fully qualified name of the service project attachment to
    /// retrieve. Expected format:
    /// `projects/{project}/locations/{location}/serviceProjectAttachments/{serviceProjectAttachment}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request for DeleteServiceProjectAttachment.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteServiceProjectAttachmentRequest {
    /// Required. Fully qualified name of the service project attachment to delete.
    /// Expected format:
    /// `projects/{project}/locations/{location}/serviceProjectAttachments/{serviceProjectAttachment}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request for DetachServiceProjectAttachment.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DetachServiceProjectAttachmentRequest {
    /// Required. Service project id and location to detach from a host project.
    /// Only global location is supported. Expected format:
    /// `projects/{project}/locations/{location}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Response for DetachServiceProjectAttachment.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DetachServiceProjectAttachmentResponse {}
/// Request for ListServices.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListServicesRequest {
    /// Required. Fully qualified name of the parent Application to list Services
    /// for. Expected format:
    /// `projects/{project}/locations/{location}/applications/{application}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Response for ListServices.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListServicesResponse {
    /// List of Services.
    #[prost(message, repeated, tag = "1")]
    pub services: ::prost::alloc::vec::Vec<Service>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Request for ListDiscoveredServices.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDiscoveredServicesRequest {
    /// Required. Project and location to list Discovered Services on.
    /// Expected format: `projects/{project}/locations/{location}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results.
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results.
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Response for ListDiscoveredServices.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDiscoveredServicesResponse {
    /// List of Discovered Services.
    #[prost(message, repeated, tag = "1")]
    pub discovered_services: ::prost::alloc::vec::Vec<DiscoveredService>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Request for CreateService.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateServiceRequest {
    /// Required. Fully qualified name of the parent Application to create the
    /// Service in. Expected format:
    /// `projects/{project}/locations/{location}/applications/{application}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The Service identifier.
    /// Must contain only lowercase letters, numbers
    /// or hyphens, with the first character a letter, the last a letter or a
    /// number, and a 63 character maximum.
    #[prost(string, tag = "2")]
    pub service_id: ::prost::alloc::string::String,
    /// Required. The resource being created.
    #[prost(message, optional, tag = "3")]
    pub service: ::core::option::Option<Service>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request for GetService.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetServiceRequest {
    /// Required. Fully qualified name of the Service to fetch.
    /// Expected format:
    /// `projects/{project}/locations/{location}/applications/{application}/services/{service}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request for GetDiscoveredService.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDiscoveredServiceRequest {
    /// Required. Fully qualified name of the Discovered Service to fetch.
    /// Expected format:
    /// `projects/{project}/locations/{location}/discoveredServices/{discoveredService}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request for LookupDiscoveredService.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupDiscoveredServiceRequest {
    /// Required. Host project ID and location to lookup Discovered Service in.
    /// Expected format: `projects/{project}/locations/{location}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. Resource URI to find DiscoveredService for.
    /// Accepts both project number and project ID and does translation when
    /// needed.
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
}
/// Response for LookupDiscoveredService.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupDiscoveredServiceResponse {
    /// Discovered Service if exists, empty otherwise.
    #[prost(message, optional, tag = "1")]
    pub discovered_service: ::core::option::Option<DiscoveredService>,
}
/// Request for UpdateService.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateServiceRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Service resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request.
    /// The API changes the values of the fields as specified in the update_mask.
    /// The API ignores the values of all fields not covered by the update_mask.
    /// You can also unset a field by not specifying it in the updated message, but
    /// adding the field to the mask. This clears whatever value the field
    /// previously had.
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Required. The resource being updated.
    #[prost(message, optional, tag = "2")]
    pub service: ::core::option::Option<Service>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request for DeleteService.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteServiceRequest {
    /// Required. Fully qualified name of the Service to delete from an
    /// Application. Expected format:
    /// `projects/{project}/locations/{location}/applications/{application}/services/{service}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request for ListApplications.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListApplicationsRequest {
    /// Required. Project and location to list Applications on.
    /// Expected format: `projects/{project}/locations/{location}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results.
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results.
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Response for ListApplications.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListApplicationsResponse {
    /// List of Applications.
    #[prost(message, repeated, tag = "1")]
    pub applications: ::prost::alloc::vec::Vec<Application>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Request for CreateApplication.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateApplicationRequest {
    /// Required. Project and location to create Application in.
    /// Expected format: `projects/{project}/locations/{location}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The Application identifier.
    /// Must contain only lowercase letters, numbers
    /// or hyphens, with the first character a letter, the last a letter or a
    /// number, and a 63 character maximum.
    #[prost(string, tag = "2")]
    pub application_id: ::prost::alloc::string::String,
    /// Required. The resource being created
    #[prost(message, optional, tag = "3")]
    pub application: ::core::option::Option<Application>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request for GetApplication.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetApplicationRequest {
    /// Required. Fully qualified name of the Application to fetch.
    /// Expected format:
    /// `projects/{project}/locations/{location}/applications/{application}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request for UpdateApplication.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateApplicationRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Application resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request.
    /// The API changes the values of the fields as specified in the update_mask.
    /// The API ignores the values of all fields not covered by the update_mask.
    /// You can also unset a field by not specifying it in the updated message, but
    /// adding the field to the mask. This clears whatever value the field
    /// previously had.
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Required. The resource being updated.
    #[prost(message, optional, tag = "2")]
    pub application: ::core::option::Option<Application>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request for DeleteApplication.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteApplicationRequest {
    /// Required. Fully qualified name of the Application to delete.
    /// Expected format:
    /// `projects/{project}/locations/{location}/applications/{application}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request for ListWorkloads.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkloadsRequest {
    /// Required. Fully qualified name of the parent Application to list Workloads
    /// for. Expected format:
    /// `projects/{project}/locations/{location}/applications/{application}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results.
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results.
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Response for ListWorkloads.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkloadsResponse {
    /// List of Workloads.
    #[prost(message, repeated, tag = "1")]
    pub workloads: ::prost::alloc::vec::Vec<Workload>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Request for ListDiscoveredWorkloads.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDiscoveredWorkloadsRequest {
    /// Required. Project and location to list Discovered Workloads on.
    /// Expected format: `projects/{project}/locations/{location}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results.
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results.
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Response for ListDiscoveredWorkloads.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDiscoveredWorkloadsResponse {
    /// List of Discovered Workloads.
    #[prost(message, repeated, tag = "1")]
    pub discovered_workloads: ::prost::alloc::vec::Vec<DiscoveredWorkload>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Request for CreateWorkload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWorkloadRequest {
    /// Required. Fully qualified name of the Application to create Workload in.
    /// Expected format:
    /// `projects/{project}/locations/{location}/applications/{application}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The Workload identifier.
    /// Must contain only lowercase letters, numbers
    /// or hyphens, with the first character a letter, the last a letter or a
    /// number, and a 63 character maximum.
    #[prost(string, tag = "2")]
    pub workload_id: ::prost::alloc::string::String,
    /// Required. The resource being created.
    #[prost(message, optional, tag = "3")]
    pub workload: ::core::option::Option<Workload>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request for GetWorkload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkloadRequest {
    /// Required. Fully qualified name of the Workload to fetch.
    /// Expected format:
    /// `projects/{project}/locations/{location}/applications/{application}/workloads/{workload}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request for GetDiscoveredWorkload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDiscoveredWorkloadRequest {
    /// Required. Fully qualified name of the Discovered Workload to fetch.
    /// Expected format:
    /// `projects/{project}/locations/{location}/discoveredWorkloads/{discoveredWorkload}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request for LookupDiscoveredWorkload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupDiscoveredWorkloadRequest {
    /// Required. Host project ID and location to lookup Discovered Workload in.
    /// Expected format: `projects/{project}/locations/{location}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. Resource URI to find Discovered Workload for.
    /// Accepts both project number and project ID and does translation when
    /// needed.
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
}
/// Response for LookupDiscoveredWorkload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupDiscoveredWorkloadResponse {
    /// Discovered Workload if exists, empty otherwise.
    #[prost(message, optional, tag = "1")]
    pub discovered_workload: ::core::option::Option<DiscoveredWorkload>,
}
/// Request for UpdateWorkload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateWorkloadRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Workload resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request.
    /// The API changes the values of the fields as specified in the update_mask.
    /// The API ignores the values of all fields not covered by the update_mask.
    /// You can also unset a field by not specifying it in the updated message, but
    /// adding the field to the mask. This clears whatever value the field
    /// previously had.
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Required. The resource being updated.
    #[prost(message, optional, tag = "2")]
    pub workload: ::core::option::Option<Workload>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request for DeleteWorkload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteWorkloadRequest {
    /// Required. Fully qualified name of the Workload to delete from an
    /// Application. Expected format:
    /// `projects/{project}/locations/{location}/applications/{application}/workloads/{workload}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
/// Represents the metadata of the long-running operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time the operation finished running.
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server-defined resource path for the target of the operation.
    #[prost(string, tag = "3")]
    pub target: ::prost::alloc::string::String,
    /// Output only. Name of the verb executed by the operation.
    #[prost(string, tag = "4")]
    pub verb: ::prost::alloc::string::String,
    /// Output only. Human-readable status of the operation, if any.
    #[prost(string, tag = "5")]
    pub status_message: ::prost::alloc::string::String,
    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been cancelled successfully
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    #[prost(bool, tag = "6")]
    pub requested_cancellation: bool,
    /// Output only. API version used to start the operation.
    #[prost(string, tag = "7")]
    pub api_version: ::prost::alloc::string::String,
}
/// Generated server implementations.
pub mod app_hub_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AppHubServer.
    #[async_trait]
    pub trait AppHub: std::marker::Send + std::marker::Sync + 'static {
        /// Lists a service project attachment for a given service project. You can
        /// call this API from any project to find if it is attached to a host project.
        async fn lookup_service_project_attachment(
            &self,
            request: tonic::Request<super::LookupServiceProjectAttachmentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LookupServiceProjectAttachmentResponse>,
            tonic::Status,
        >;
        /// Lists service projects attached to the host project.
        async fn list_service_project_attachments(
            &self,
            request: tonic::Request<super::ListServiceProjectAttachmentsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListServiceProjectAttachmentsResponse>,
            tonic::Status,
        >;
        /// Attaches a service project to the host project.
        async fn create_service_project_attachment(
            &self,
            request: tonic::Request<super::CreateServiceProjectAttachmentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Gets a service project attachment.
        async fn get_service_project_attachment(
            &self,
            request: tonic::Request<super::GetServiceProjectAttachmentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ServiceProjectAttachment>,
            tonic::Status,
        >;
        /// Deletes a service project attachment.
        async fn delete_service_project_attachment(
            &self,
            request: tonic::Request<super::DeleteServiceProjectAttachmentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Detaches a service project from a host project.
        /// You can call this API from any service project without needing access to
        /// the host project that it is attached to.
        async fn detach_service_project_attachment(
            &self,
            request: tonic::Request<super::DetachServiceProjectAttachmentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DetachServiceProjectAttachmentResponse>,
            tonic::Status,
        >;
        /// Lists Discovered Services that can be added to an Application in a host
        /// project and location.
        async fn list_discovered_services(
            &self,
            request: tonic::Request<super::ListDiscoveredServicesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListDiscoveredServicesResponse>,
            tonic::Status,
        >;
        /// Gets a Discovered Service in a host project and location.
        async fn get_discovered_service(
            &self,
            request: tonic::Request<super::GetDiscoveredServiceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DiscoveredService>,
            tonic::Status,
        >;
        /// Lists a Discovered Service in a host project and location, with a
        /// given resource URI.
        async fn lookup_discovered_service(
            &self,
            request: tonic::Request<super::LookupDiscoveredServiceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LookupDiscoveredServiceResponse>,
            tonic::Status,
        >;
        /// Lists Services in an Application.
        async fn list_services(
            &self,
            request: tonic::Request<super::ListServicesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListServicesResponse>,
            tonic::Status,
        >;
        /// Creates a Service in an Application.
        async fn create_service(
            &self,
            request: tonic::Request<super::CreateServiceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Gets a Service in an Application.
        async fn get_service(
            &self,
            request: tonic::Request<super::GetServiceRequest>,
        ) -> std::result::Result<tonic::Response<super::Service>, tonic::Status>;
        /// Updates a Service in an Application.
        async fn update_service(
            &self,
            request: tonic::Request<super::UpdateServiceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Deletes a Service from an Application.
        async fn delete_service(
            &self,
            request: tonic::Request<super::DeleteServiceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Lists Discovered Workloads that can be added to an Application in a host
        /// project and location.
        async fn list_discovered_workloads(
            &self,
            request: tonic::Request<super::ListDiscoveredWorkloadsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListDiscoveredWorkloadsResponse>,
            tonic::Status,
        >;
        /// Gets a Discovered Workload in a host project and location.
        async fn get_discovered_workload(
            &self,
            request: tonic::Request<super::GetDiscoveredWorkloadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DiscoveredWorkload>,
            tonic::Status,
        >;
        /// Lists a Discovered Workload in a host project and location, with a
        /// given resource URI.
        async fn lookup_discovered_workload(
            &self,
            request: tonic::Request<super::LookupDiscoveredWorkloadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LookupDiscoveredWorkloadResponse>,
            tonic::Status,
        >;
        /// Lists Workloads in an Application.
        async fn list_workloads(
            &self,
            request: tonic::Request<super::ListWorkloadsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListWorkloadsResponse>,
            tonic::Status,
        >;
        /// Creates a Workload in an Application.
        async fn create_workload(
            &self,
            request: tonic::Request<super::CreateWorkloadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Gets a Workload in an Application.
        async fn get_workload(
            &self,
            request: tonic::Request<super::GetWorkloadRequest>,
        ) -> std::result::Result<tonic::Response<super::Workload>, tonic::Status>;
        /// Updates a Workload in an Application.
        async fn update_workload(
            &self,
            request: tonic::Request<super::UpdateWorkloadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Deletes a Workload from an Application.
        async fn delete_workload(
            &self,
            request: tonic::Request<super::DeleteWorkloadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Lists Applications in a host project and location.
        async fn list_applications(
            &self,
            request: tonic::Request<super::ListApplicationsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListApplicationsResponse>,
            tonic::Status,
        >;
        /// Creates an Application in a host project and location.
        async fn create_application(
            &self,
            request: tonic::Request<super::CreateApplicationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Gets an Application in a host project and location.
        async fn get_application(
            &self,
            request: tonic::Request<super::GetApplicationRequest>,
        ) -> std::result::Result<tonic::Response<super::Application>, tonic::Status>;
        /// Updates an Application in a host project and location.
        async fn update_application(
            &self,
            request: tonic::Request<super::UpdateApplicationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Deletes an Application in a host project and location.
        async fn delete_application(
            &self,
            request: tonic::Request<super::DeleteApplicationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
    }
    /// The App Hub API allows you to manage App Hub resources.
    #[derive(Debug)]
    pub struct AppHubServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> AppHubServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for AppHubServer<T>
    where
        T: AppHub,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/google.cloud.apphub.v1.AppHub/LookupServiceProjectAttachment" => {
                    #[allow(non_camel_case_types)]
                    struct LookupServiceProjectAttachmentSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<
                        super::LookupServiceProjectAttachmentRequest,
                    > for LookupServiceProjectAttachmentSvc<T> {
                        type Response = super::LookupServiceProjectAttachmentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::LookupServiceProjectAttachmentRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::lookup_service_project_attachment(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LookupServiceProjectAttachmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/ListServiceProjectAttachments" => {
                    #[allow(non_camel_case_types)]
                    struct ListServiceProjectAttachmentsSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<
                        super::ListServiceProjectAttachmentsRequest,
                    > for ListServiceProjectAttachmentsSvc<T> {
                        type Response = super::ListServiceProjectAttachmentsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ListServiceProjectAttachmentsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::list_service_project_attachments(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListServiceProjectAttachmentsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/CreateServiceProjectAttachment" => {
                    #[allow(non_camel_case_types)]
                    struct CreateServiceProjectAttachmentSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<
                        super::CreateServiceProjectAttachmentRequest,
                    > for CreateServiceProjectAttachmentSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::CreateServiceProjectAttachmentRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::create_service_project_attachment(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateServiceProjectAttachmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/GetServiceProjectAttachment" => {
                    #[allow(non_camel_case_types)]
                    struct GetServiceProjectAttachmentSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<
                        super::GetServiceProjectAttachmentRequest,
                    > for GetServiceProjectAttachmentSvc<T> {
                        type Response = super::ServiceProjectAttachment;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetServiceProjectAttachmentRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::get_service_project_attachment(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetServiceProjectAttachmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/DeleteServiceProjectAttachment" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteServiceProjectAttachmentSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<
                        super::DeleteServiceProjectAttachmentRequest,
                    > for DeleteServiceProjectAttachmentSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::DeleteServiceProjectAttachmentRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::delete_service_project_attachment(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteServiceProjectAttachmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/DetachServiceProjectAttachment" => {
                    #[allow(non_camel_case_types)]
                    struct DetachServiceProjectAttachmentSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<
                        super::DetachServiceProjectAttachmentRequest,
                    > for DetachServiceProjectAttachmentSvc<T> {
                        type Response = super::DetachServiceProjectAttachmentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::DetachServiceProjectAttachmentRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::detach_service_project_attachment(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DetachServiceProjectAttachmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/ListDiscoveredServices" => {
                    #[allow(non_camel_case_types)]
                    struct ListDiscoveredServicesSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::ListDiscoveredServicesRequest>
                    for ListDiscoveredServicesSvc<T> {
                        type Response = super::ListDiscoveredServicesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListDiscoveredServicesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::list_discovered_services(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListDiscoveredServicesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/GetDiscoveredService" => {
                    #[allow(non_camel_case_types)]
                    struct GetDiscoveredServiceSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::GetDiscoveredServiceRequest>
                    for GetDiscoveredServiceSvc<T> {
                        type Response = super::DiscoveredService;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetDiscoveredServiceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::get_discovered_service(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetDiscoveredServiceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/LookupDiscoveredService" => {
                    #[allow(non_camel_case_types)]
                    struct LookupDiscoveredServiceSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::LookupDiscoveredServiceRequest>
                    for LookupDiscoveredServiceSvc<T> {
                        type Response = super::LookupDiscoveredServiceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::LookupDiscoveredServiceRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::lookup_discovered_service(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LookupDiscoveredServiceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/ListServices" => {
                    #[allow(non_camel_case_types)]
                    struct ListServicesSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::ListServicesRequest>
                    for ListServicesSvc<T> {
                        type Response = super::ListServicesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListServicesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::list_services(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListServicesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/CreateService" => {
                    #[allow(non_camel_case_types)]
                    struct CreateServiceSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::CreateServiceRequest>
                    for CreateServiceSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateServiceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::create_service(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateServiceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/GetService" => {
                    #[allow(non_camel_case_types)]
                    struct GetServiceSvc<T: AppHub>(pub Arc<T>);
                    impl<T: AppHub> tonic::server::UnaryService<super::GetServiceRequest>
                    for GetServiceSvc<T> {
                        type Response = super::Service;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetServiceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::get_service(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetServiceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/UpdateService" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateServiceSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::UpdateServiceRequest>
                    for UpdateServiceSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateServiceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::update_service(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateServiceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/DeleteService" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteServiceSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::DeleteServiceRequest>
                    for DeleteServiceSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteServiceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::delete_service(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteServiceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/ListDiscoveredWorkloads" => {
                    #[allow(non_camel_case_types)]
                    struct ListDiscoveredWorkloadsSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::ListDiscoveredWorkloadsRequest>
                    for ListDiscoveredWorkloadsSvc<T> {
                        type Response = super::ListDiscoveredWorkloadsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ListDiscoveredWorkloadsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::list_discovered_workloads(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListDiscoveredWorkloadsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/GetDiscoveredWorkload" => {
                    #[allow(non_camel_case_types)]
                    struct GetDiscoveredWorkloadSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::GetDiscoveredWorkloadRequest>
                    for GetDiscoveredWorkloadSvc<T> {
                        type Response = super::DiscoveredWorkload;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetDiscoveredWorkloadRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::get_discovered_workload(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetDiscoveredWorkloadSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/LookupDiscoveredWorkload" => {
                    #[allow(non_camel_case_types)]
                    struct LookupDiscoveredWorkloadSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::LookupDiscoveredWorkloadRequest>
                    for LookupDiscoveredWorkloadSvc<T> {
                        type Response = super::LookupDiscoveredWorkloadResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::LookupDiscoveredWorkloadRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::lookup_discovered_workload(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LookupDiscoveredWorkloadSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/ListWorkloads" => {
                    #[allow(non_camel_case_types)]
                    struct ListWorkloadsSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::ListWorkloadsRequest>
                    for ListWorkloadsSvc<T> {
                        type Response = super::ListWorkloadsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListWorkloadsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::list_workloads(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListWorkloadsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/CreateWorkload" => {
                    #[allow(non_camel_case_types)]
                    struct CreateWorkloadSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::CreateWorkloadRequest>
                    for CreateWorkloadSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateWorkloadRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::create_workload(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateWorkloadSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/GetWorkload" => {
                    #[allow(non_camel_case_types)]
                    struct GetWorkloadSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::GetWorkloadRequest>
                    for GetWorkloadSvc<T> {
                        type Response = super::Workload;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetWorkloadRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::get_workload(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetWorkloadSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/UpdateWorkload" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateWorkloadSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::UpdateWorkloadRequest>
                    for UpdateWorkloadSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateWorkloadRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::update_workload(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateWorkloadSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/DeleteWorkload" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteWorkloadSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::DeleteWorkloadRequest>
                    for DeleteWorkloadSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteWorkloadRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::delete_workload(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteWorkloadSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/ListApplications" => {
                    #[allow(non_camel_case_types)]
                    struct ListApplicationsSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::ListApplicationsRequest>
                    for ListApplicationsSvc<T> {
                        type Response = super::ListApplicationsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListApplicationsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::list_applications(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListApplicationsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/CreateApplication" => {
                    #[allow(non_camel_case_types)]
                    struct CreateApplicationSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::CreateApplicationRequest>
                    for CreateApplicationSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateApplicationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::create_application(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateApplicationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/GetApplication" => {
                    #[allow(non_camel_case_types)]
                    struct GetApplicationSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::GetApplicationRequest>
                    for GetApplicationSvc<T> {
                        type Response = super::Application;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetApplicationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::get_application(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetApplicationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/UpdateApplication" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateApplicationSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::UpdateApplicationRequest>
                    for UpdateApplicationSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateApplicationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::update_application(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateApplicationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.apphub.v1.AppHub/DeleteApplication" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteApplicationSvc<T: AppHub>(pub Arc<T>);
                    impl<
                        T: AppHub,
                    > tonic::server::UnaryService<super::DeleteApplicationRequest>
                    for DeleteApplicationSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteApplicationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AppHub>::delete_application(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteApplicationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for AppHubServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "google.cloud.apphub.v1.AppHub";
    impl<T> tonic::server::NamedService for AppHubServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}

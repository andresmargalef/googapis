// This file is @generated by prost-build.
/// Request message for
/// [KeyDashboardService.ListCryptoKeys][google.cloud.kms.inventory.v1.KeyDashboardService.ListCryptoKeys].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCryptoKeysRequest {
    /// Required. The Google Cloud project for which to retrieve key metadata, in
    /// the format `projects/*`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of keys to return. The service may return
    /// fewer than this value. If unspecified, at most 1000 keys will be returned.
    /// The maximum value is 1000; values above 1000 will be coerced to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. Pass this into a subsequent request in order to receive the next
    /// page of results.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
/// Response message for
/// [KeyDashboardService.ListCryptoKeys][google.cloud.kms.inventory.v1.KeyDashboardService.ListCryptoKeys].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCryptoKeysResponse {
    /// The list of [CryptoKeys][google.cloud.kms.v1.CryptoKey].
    #[prost(message, repeated, tag = "1")]
    pub crypto_keys: ::prost::alloc::vec::Vec<super::super::v1::CryptoKey>,
    /// The page token returned from the previous response if the next page is
    /// desired.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Generated server implementations.
pub mod key_dashboard_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with KeyDashboardServiceServer.
    #[async_trait]
    pub trait KeyDashboardService: std::marker::Send + std::marker::Sync + 'static {
        /// Returns cryptographic keys managed by Cloud KMS in a given Cloud project.
        /// Note that this data is sourced from snapshots, meaning it may not
        /// completely reflect the actual state of key metadata at call time.
        async fn list_crypto_keys(
            &self,
            request: tonic::Request<super::ListCryptoKeysRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListCryptoKeysResponse>,
            tonic::Status,
        >;
    }
    /// Provides a cross-region view of all Cloud KMS keys in a given Cloud project.
    #[derive(Debug)]
    pub struct KeyDashboardServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> KeyDashboardServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for KeyDashboardServiceServer<T>
    where
        T: KeyDashboardService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/google.cloud.kms.inventory.v1.KeyDashboardService/ListCryptoKeys" => {
                    #[allow(non_camel_case_types)]
                    struct ListCryptoKeysSvc<T: KeyDashboardService>(pub Arc<T>);
                    impl<
                        T: KeyDashboardService,
                    > tonic::server::UnaryService<super::ListCryptoKeysRequest>
                    for ListCryptoKeysSvc<T> {
                        type Response = super::ListCryptoKeysResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListCryptoKeysRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KeyDashboardService>::list_crypto_keys(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListCryptoKeysSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for KeyDashboardServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "google.cloud.kms.inventory.v1.KeyDashboardService";
    impl<T> tonic::server::NamedService for KeyDashboardServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Request message for
/// [KeyTrackingService.GetProtectedResourcesSummary][google.cloud.kms.inventory.v1.KeyTrackingService.GetProtectedResourcesSummary].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProtectedResourcesSummaryRequest {
    /// Required. The resource name of the
    /// [CryptoKey][google.cloud.kms.v1.CryptoKey].
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Aggregate information about the resources protected by a Cloud KMS key in the
/// same Cloud organization as the key.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProtectedResourcesSummary {
    /// The full name of the ProtectedResourcesSummary resource.
    /// Example:
    /// projects/test-project/locations/us/keyRings/test-keyring/cryptoKeys/test-key/protectedResourcesSummary
    #[prost(string, tag = "5")]
    pub name: ::prost::alloc::string::String,
    /// The total number of protected resources in the same Cloud organization as
    /// the key.
    #[prost(int64, tag = "1")]
    pub resource_count: i64,
    /// The number of distinct Cloud projects in the same Cloud organization as the
    /// key that have resources protected by the key.
    #[prost(int32, tag = "2")]
    pub project_count: i32,
    /// The number of resources protected by the key grouped by resource type.
    #[prost(map = "string, int64", tag = "3")]
    pub resource_types: ::std::collections::HashMap<::prost::alloc::string::String, i64>,
    /// The number of resources protected by the key grouped by Cloud product.
    #[prost(map = "string, int64", tag = "6")]
    pub cloud_products: ::std::collections::HashMap<::prost::alloc::string::String, i64>,
    /// The number of resources protected by the key grouped by region.
    #[prost(map = "string, int64", tag = "4")]
    pub locations: ::std::collections::HashMap<::prost::alloc::string::String, i64>,
}
/// Request message for
/// [KeyTrackingService.SearchProtectedResources][google.cloud.kms.inventory.v1.KeyTrackingService.SearchProtectedResources].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchProtectedResourcesRequest {
    /// Required. Resource name of the organization.
    /// Example: organizations/123
    #[prost(string, tag = "2")]
    pub scope: ::prost::alloc::string::String,
    /// Required. The resource name of the
    /// [CryptoKey][google.cloud.kms.v1.CryptoKey].
    #[prost(string, tag = "1")]
    pub crypto_key: ::prost::alloc::string::String,
    /// The maximum number of resources to return. The service may return fewer
    /// than this value.
    /// If unspecified, at most 500 resources will be returned.
    /// The maximum value is 500; values above 500 will be coerced to 500.
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    /// A page token, received from a previous
    /// [KeyTrackingService.SearchProtectedResources][google.cloud.kms.inventory.v1.KeyTrackingService.SearchProtectedResources]
    /// call. Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to
    /// [KeyTrackingService.SearchProtectedResources][google.cloud.kms.inventory.v1.KeyTrackingService.SearchProtectedResources]
    /// must match the call that provided the page token.
    #[prost(string, tag = "4")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. A list of resource types that this request searches for. If
    /// empty, it will search all the [trackable resource
    /// types](<https://cloud.google.com/kms/docs/view-key-usage#tracked-resource-types>).
    ///
    /// Regular expressions are also supported. For example:
    ///
    /// * `compute.googleapis.com.*` snapshots resources whose type starts
    /// with `compute.googleapis.com`.
    /// * `.*Image` snapshots resources whose type ends with `Image`.
    /// * `.*Image.*` snapshots resources whose type contains `Image`.
    ///
    /// See [RE2](<https://github.com/google/re2/wiki/Syntax>) for all supported
    /// regular expression syntax. If the regular expression does not match any
    /// supported resource type, an INVALID_ARGUMENT error will be returned.
    #[prost(string, repeated, tag = "5")]
    pub resource_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Response message for
/// [KeyTrackingService.SearchProtectedResources][google.cloud.kms.inventory.v1.KeyTrackingService.SearchProtectedResources].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchProtectedResourcesResponse {
    /// Protected resources for this page.
    #[prost(message, repeated, tag = "1")]
    pub protected_resources: ::prost::alloc::vec::Vec<ProtectedResource>,
    /// A token that can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Metadata about a resource protected by a Cloud KMS key.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProtectedResource {
    /// The full resource name of the resource.
    /// Example:
    /// `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Format: `projects/{PROJECT_NUMBER}`.
    #[prost(string, tag = "2")]
    pub project: ::prost::alloc::string::String,
    /// The ID of the project that owns the resource.
    #[prost(string, tag = "9")]
    pub project_id: ::prost::alloc::string::String,
    /// The Cloud product that owns the resource.
    /// Example: `compute`
    #[prost(string, tag = "8")]
    pub cloud_product: ::prost::alloc::string::String,
    /// Example: `compute.googleapis.com/Disk`
    #[prost(string, tag = "3")]
    pub resource_type: ::prost::alloc::string::String,
    /// Location can be `global`, regional like `us-east1`, or zonal like
    /// `us-west1-b`.
    #[prost(string, tag = "4")]
    pub location: ::prost::alloc::string::String,
    /// A key-value pair of the resource's labels (v1) to their values.
    #[prost(map = "string, string", tag = "5")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// The name of the Cloud KMS
    /// [CryptoKeyVersion](<https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions?hl=en>)
    /// used to protect this resource via CMEK. This field is empty if the
    /// Google Cloud product owning the resource does not provide key version data
    /// to Asset Inventory. If there are multiple key versions protecting the
    /// resource, then this is same value as the first element of
    /// crypto_key_versions.
    #[prost(string, tag = "6")]
    pub crypto_key_version: ::prost::alloc::string::String,
    /// The names of the Cloud KMS
    /// [CryptoKeyVersion](<https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions?hl=en>)
    /// used to protect this resource via CMEK. This field is empty if the
    /// Google Cloud product owning the resource does not provide key versions data
    /// to Asset Inventory. The first element of this field is stored in
    /// crypto_key_version.
    #[prost(string, repeated, tag = "10")]
    pub crypto_key_versions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Output only. The time at which this resource was created. The granularity
    /// is in seconds. Timestamp.nanos will always be 0.
    #[prost(message, optional, tag = "7")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Generated server implementations.
pub mod key_tracking_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with KeyTrackingServiceServer.
    #[async_trait]
    pub trait KeyTrackingService: std::marker::Send + std::marker::Sync + 'static {
        /// Returns aggregate information about the resources protected by the given
        /// Cloud KMS [CryptoKey][google.cloud.kms.v1.CryptoKey]. Only resources within
        /// the same Cloud organization as the key will be returned. The project that
        /// holds the key must be part of an organization in order for this call to
        /// succeed.
        async fn get_protected_resources_summary(
            &self,
            request: tonic::Request<super::GetProtectedResourcesSummaryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ProtectedResourcesSummary>,
            tonic::Status,
        >;
        /// Returns metadata about the resources protected by the given Cloud KMS
        /// [CryptoKey][google.cloud.kms.v1.CryptoKey] in the given Cloud organization.
        async fn search_protected_resources(
            &self,
            request: tonic::Request<super::SearchProtectedResourcesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchProtectedResourcesResponse>,
            tonic::Status,
        >;
    }
    /// Returns information about the resources in an org that are protected by a
    /// given Cloud KMS key via CMEK.
    #[derive(Debug)]
    pub struct KeyTrackingServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> KeyTrackingServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for KeyTrackingServiceServer<T>
    where
        T: KeyTrackingService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/google.cloud.kms.inventory.v1.KeyTrackingService/GetProtectedResourcesSummary" => {
                    #[allow(non_camel_case_types)]
                    struct GetProtectedResourcesSummarySvc<T: KeyTrackingService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: KeyTrackingService,
                    > tonic::server::UnaryService<
                        super::GetProtectedResourcesSummaryRequest,
                    > for GetProtectedResourcesSummarySvc<T> {
                        type Response = super::ProtectedResourcesSummary;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetProtectedResourcesSummaryRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KeyTrackingService>::get_protected_resources_summary(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetProtectedResourcesSummarySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.kms.inventory.v1.KeyTrackingService/SearchProtectedResources" => {
                    #[allow(non_camel_case_types)]
                    struct SearchProtectedResourcesSvc<T: KeyTrackingService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: KeyTrackingService,
                    > tonic::server::UnaryService<super::SearchProtectedResourcesRequest>
                    for SearchProtectedResourcesSvc<T> {
                        type Response = super::SearchProtectedResourcesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::SearchProtectedResourcesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KeyTrackingService>::search_protected_resources(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchProtectedResourcesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for KeyTrackingServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "google.cloud.kms.inventory.v1.KeyTrackingService";
    impl<T> tonic::server::NamedService for KeyTrackingServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}

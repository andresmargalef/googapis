// This file is @generated by prost-build.
/// CreateProfileRequest describes a profile resource online creation request.
/// The deployment field must be populated. The profile_type specifies the list
/// of profile types supported by the agent. The creation call will hang until a
/// profile of one of these types needs to be collected.
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateProfileRequest {
    /// Parent project to create the profile in.
    #[prost(string, tag = "4")]
    pub parent: ::prost::alloc::string::String,
    /// Deployment details.
    #[prost(message, optional, tag = "1")]
    pub deployment: ::core::option::Option<Deployment>,
    /// One or more profile types that the agent is capable of providing.
    #[prost(enumeration = "ProfileType", repeated, tag = "2")]
    pub profile_type: ::prost::alloc::vec::Vec<i32>,
}
/// CreateOfflineProfileRequest describes a profile resource offline creation
/// request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateOfflineProfileRequest {
    /// Parent project to create the profile in.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Contents of the profile to create.
    #[prost(message, optional, tag = "2")]
    pub profile: ::core::option::Option<Profile>,
}
/// UpdateProfileRequest contains the profile to update.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateProfileRequest {
    /// Profile to update.
    #[prost(message, optional, tag = "1")]
    pub profile: ::core::option::Option<Profile>,
    /// Field mask used to specify the fields to be overwritten. Currently only
    /// profile_bytes and labels fields are supported by UpdateProfile, so only
    /// those fields can be specified in the mask. When no mask is provided, all
    /// fields are overwritten.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// Profile resource.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Profile {
    /// Output only. Opaque, server-assigned, unique ID for this profile.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Type of profile.
    /// For offline mode, this must be specified when creating the profile. For
    /// online mode it is assigned and returned by the server.
    #[prost(enumeration = "ProfileType", tag = "2")]
    pub profile_type: i32,
    /// Deployment this profile corresponds to.
    #[prost(message, optional, tag = "3")]
    pub deployment: ::core::option::Option<Deployment>,
    /// Duration of the profiling session.
    /// Input (for the offline mode) or output (for the online mode).
    /// The field represents requested profiling duration. It may slightly differ
    /// from the effective profiling duration, which is recorded in the profile
    /// data, in case the profiling can't be stopped immediately (e.g. in case
    /// stopping the profiling is handled asynchronously).
    #[prost(message, optional, tag = "4")]
    pub duration: ::core::option::Option<::prost_types::Duration>,
    /// Input only. Profile bytes, as a gzip compressed serialized proto, the
    /// format is <https://github.com/google/pprof/blob/master/proto/profile.proto.>
    #[prost(bytes = "vec", tag = "5")]
    pub profile_bytes: ::prost::alloc::vec::Vec<u8>,
    /// Input only. Labels associated to this specific profile. These labels will
    /// get merged with the deployment labels for the final data set. See
    /// documentation on deployment labels for validation rules and limits.
    #[prost(map = "string, string", tag = "6")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Output only. Start time for the profile.
    /// This output is only present in response from the ListProfiles method.
    #[prost(message, optional, tag = "7")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Deployment contains the deployment identification information.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Deployment {
    /// Project ID is the ID of a cloud project.
    /// Validation regex: `^[a-z][-a-z0-9:.]{4,61}\[a-z0-9\]$`.
    #[prost(string, tag = "1")]
    pub project_id: ::prost::alloc::string::String,
    /// Target is the service name used to group related deployments:
    /// * Service name for App Engine Flex / Standard.
    /// * Cluster and container name for GKE.
    /// * User-specified string for direct Compute Engine profiling (e.g. Java).
    /// * Job name for Dataflow.
    /// Validation regex: `^[a-z0-9](\[-a-z0-9_.\]{0,253}\[a-z0-9\])?$`.
    #[prost(string, tag = "2")]
    pub target: ::prost::alloc::string::String,
    /// Labels identify the deployment within the user universe and same target.
    /// Validation regex for label names: `^[a-z0-9](\[a-z0-9-\]{0,61}\[a-z0-9\])?$`.
    /// Value for an individual label must be <= 512 bytes, the total
    /// size of all label names and values must be <= 1024 bytes.
    ///
    /// Label named "language" can be used to record the programming language of
    /// the profiled deployment. The standard choices for the value include "java",
    /// "go", "python", "ruby", "nodejs", "php", "dotnet".
    ///
    /// For deployments running on Google Cloud Platform, "zone" or "region" label
    /// should be present describing the deployment location. An example of a zone
    /// is "us-central1-a", an example of a region is "us-central1" or
    /// "us-central".
    #[prost(map = "string, string", tag = "3")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// ListProfilesRequest contains request parameters for listing profiles for
/// deployments in projects which the user has permissions to view.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListProfilesRequest {
    /// Required. The parent, which owns this collection of profiles.
    /// Format: projects/{user_project_id}
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of items to return.
    /// Default page_size is 1000.
    /// Max limit is 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// The token to continue pagination and get profiles from a particular page.
    /// When paginating, all other parameters provided to `ListProfiles` must match
    /// the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
/// ListProfileResponse contains the list of collected profiles for deployments
/// in projects which the user has permissions to view.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListProfilesResponse {
    /// List of profiles fetched.
    #[prost(message, repeated, tag = "1")]
    pub profiles: ::prost::alloc::vec::Vec<Profile>,
    /// Token to receive the next page of results.
    /// This field maybe empty if there are no more profiles to fetch.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Number of profiles that were skipped in the current page since they were
    /// not able to be fetched successfully. This should typically be zero. A
    /// non-zero value may indicate a transient failure, in which case if the
    /// number is too high for your use case, the call may be retried.
    #[prost(int32, tag = "3")]
    pub skipped_profiles: i32,
}
/// ProfileType is type of profiling data.
/// NOTE: the enumeration member names are used (in lowercase) as unique string
/// identifiers of profile types, so they must not be renamed.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProfileType {
    /// Unspecified profile type.
    Unspecified = 0,
    /// Thread CPU time sampling.
    Cpu = 1,
    /// Wallclock time sampling. More expensive as stops all threads.
    Wall = 2,
    /// In-use heap profile. Represents a snapshot of the allocations that are
    /// live at the time of the profiling.
    Heap = 3,
    /// Single-shot collection of all thread stacks.
    Threads = 4,
    /// Synchronization contention profile.
    Contention = 5,
    /// Peak heap profile.
    PeakHeap = 6,
    /// Heap allocation profile. It represents the aggregation of all allocations
    /// made over the duration of the profile. All allocations are included,
    /// including those that might have been freed by the end of the profiling
    /// interval. The profile is in particular useful for garbage collecting
    /// languages to understand which parts of the code create most of the garbage
    /// collection pressure to see if those can be optimized.
    HeapAlloc = 7,
}
impl ProfileType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ProfileType::Unspecified => "PROFILE_TYPE_UNSPECIFIED",
            ProfileType::Cpu => "CPU",
            ProfileType::Wall => "WALL",
            ProfileType::Heap => "HEAP",
            ProfileType::Threads => "THREADS",
            ProfileType::Contention => "CONTENTION",
            ProfileType::PeakHeap => "PEAK_HEAP",
            ProfileType::HeapAlloc => "HEAP_ALLOC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PROFILE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "CPU" => Some(Self::Cpu),
            "WALL" => Some(Self::Wall),
            "HEAP" => Some(Self::Heap),
            "THREADS" => Some(Self::Threads),
            "CONTENTION" => Some(Self::Contention),
            "PEAK_HEAP" => Some(Self::PeakHeap),
            "HEAP_ALLOC" => Some(Self::HeapAlloc),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod profiler_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ProfilerServiceServer.
    #[async_trait]
    pub trait ProfilerService: Send + Sync + 'static {
        /// CreateProfile creates a new profile resource in the online mode.
        ///
        /// _Direct use of this API is discouraged, please use a [supported
        /// profiler
        /// agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
        /// instead for profile collection._
        ///
        /// The server ensures that the new profiles are created at a constant rate per
        /// deployment, so the creation request may hang for some time until the next
        /// profile session is available.
        ///
        /// The request may fail with ABORTED error if the creation is not available
        /// within ~1m, the response will indicate the duration of the backoff the
        /// client should take before attempting creating a profile again. The backoff
        /// duration is returned in google.rpc.RetryInfo extension on the response
        /// status. To a gRPC client, the extension will be return as a
        /// binary-serialized proto in the trailing metadata item named
        /// "google.rpc.retryinfo-bin".
        ///
        async fn create_profile(
            &self,
            request: tonic::Request<super::CreateProfileRequest>,
        ) -> std::result::Result<tonic::Response<super::Profile>, tonic::Status>;
        /// CreateOfflineProfile creates a new profile resource in the offline
        /// mode. The client provides the profile to create along with the profile
        /// bytes, the server records it.
        ///
        /// _Direct use of this API is discouraged, please use a [supported
        /// profiler
        /// agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
        /// instead for profile collection._
        async fn create_offline_profile(
            &self,
            request: tonic::Request<super::CreateOfflineProfileRequest>,
        ) -> std::result::Result<tonic::Response<super::Profile>, tonic::Status>;
        /// UpdateProfile updates the profile bytes and labels on the profile resource
        /// created in the online mode. Updating the bytes for profiles created in the
        /// offline mode is currently not supported: the profile content must be
        /// provided at the time of the profile creation.
        ///
        /// _Direct use of this API is discouraged, please use a [supported
        /// profiler
        /// agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
        /// instead for profile collection._
        async fn update_profile(
            &self,
            request: tonic::Request<super::UpdateProfileRequest>,
        ) -> std::result::Result<tonic::Response<super::Profile>, tonic::Status>;
    }
    /// Manage the collection of continuous profiling data provided by profiling
    /// agents running in the cloud or by an offline provider of profiling data.
    ///
    /// __The APIs listed in this service are intended for use within our profiler
    /// agents only.__
    #[derive(Debug)]
    pub struct ProfilerServiceServer<T: ProfilerService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: ProfilerService> ProfilerServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ProfilerServiceServer<T>
    where
        T: ProfilerService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/google.devtools.cloudprofiler.v2.ProfilerService/CreateProfile" => {
                    #[allow(non_camel_case_types)]
                    struct CreateProfileSvc<T: ProfilerService>(pub Arc<T>);
                    impl<
                        T: ProfilerService,
                    > tonic::server::UnaryService<super::CreateProfileRequest>
                    for CreateProfileSvc<T> {
                        type Response = super::Profile;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateProfileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProfilerService>::create_profile(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreateProfileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudprofiler.v2.ProfilerService/CreateOfflineProfile" => {
                    #[allow(non_camel_case_types)]
                    struct CreateOfflineProfileSvc<T: ProfilerService>(pub Arc<T>);
                    impl<
                        T: ProfilerService,
                    > tonic::server::UnaryService<super::CreateOfflineProfileRequest>
                    for CreateOfflineProfileSvc<T> {
                        type Response = super::Profile;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateOfflineProfileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProfilerService>::create_offline_profile(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreateOfflineProfileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.devtools.cloudprofiler.v2.ProfilerService/UpdateProfile" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateProfileSvc<T: ProfilerService>(pub Arc<T>);
                    impl<
                        T: ProfilerService,
                    > tonic::server::UnaryService<super::UpdateProfileRequest>
                    for UpdateProfileSvc<T> {
                        type Response = super::Profile;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateProfileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProfilerService>::update_profile(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateProfileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: ProfilerService> Clone for ProfilerServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: ProfilerService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: ProfilerService> tonic::server::NamedService for ProfilerServiceServer<T> {
        const NAME: &'static str = "google.devtools.cloudprofiler.v2.ProfilerService";
    }
}
/// Generated server implementations.
pub mod export_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ExportServiceServer.
    #[async_trait]
    pub trait ExportService: Send + Sync + 'static {
        /// Lists profiles which have been collected so far and for which the caller
        /// has permission to view.
        async fn list_profiles(
            &self,
            request: tonic::Request<super::ListProfilesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListProfilesResponse>,
            tonic::Status,
        >;
    }
    /// Service allows existing Cloud Profiler customers to export their profile data
    /// out of Google Cloud.
    #[derive(Debug)]
    pub struct ExportServiceServer<T: ExportService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: ExportService> ExportServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ExportServiceServer<T>
    where
        T: ExportService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/google.devtools.cloudprofiler.v2.ExportService/ListProfiles" => {
                    #[allow(non_camel_case_types)]
                    struct ListProfilesSvc<T: ExportService>(pub Arc<T>);
                    impl<
                        T: ExportService,
                    > tonic::server::UnaryService<super::ListProfilesRequest>
                    for ListProfilesSvc<T> {
                        type Response = super::ListProfilesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListProfilesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ExportService>::list_profiles(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListProfilesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: ExportService> Clone for ExportServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: ExportService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: ExportService> tonic::server::NamedService for ExportServiceServer<T> {
        const NAME: &'static str = "google.devtools.cloudprofiler.v2.ExportService";
    }
}

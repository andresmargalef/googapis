// This file is @generated by prost-build.
/// Request message for [PrivateCatalog.SearchCatalogs][google.cloud.privatecatalog.v1beta1.PrivateCatalog.SearchCatalogs].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchCatalogsRequest {
    /// Required. The name of the resource context. It can be in following formats:
    ///
    /// * `projects/{project}`
    /// * `folders/{folder}`
    /// * `organizations/{organization}`
    #[prost(string, tag = "1")]
    pub resource: ::prost::alloc::string::String,
    /// The query to filter the catalogs. The supported queries are:
    ///
    /// * Get a single catalog: `name=catalogs/{catalog}`
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
    /// The maximum number of entries that are requested.
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    /// A pagination token returned from a previous call to SearchCatalogs that
    /// indicates where this listing should continue from.
    #[prost(string, tag = "4")]
    pub page_token: ::prost::alloc::string::String,
}
/// Response message for [PrivateCatalog.SearchCatalogs][google.cloud.privatecatalog.v1beta1.PrivateCatalog.SearchCatalogs].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchCatalogsResponse {
    /// The `Catalog`s computed from the resource context.
    #[prost(message, repeated, tag = "1")]
    pub catalogs: ::prost::alloc::vec::Vec<Catalog>,
    /// A pagination token returned from a previous call to SearchCatalogs that
    /// indicates from where listing should continue.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for [PrivateCatalog.SearchProducts][google.cloud.privatecatalog.v1beta1.PrivateCatalog.SearchProducts].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchProductsRequest {
    /// Required. The name of the resource context. See [SearchCatalogsRequest.resource][google.cloud.privatecatalog.v1beta1.SearchCatalogsRequest.resource]
    /// for details.
    #[prost(string, tag = "1")]
    pub resource: ::prost::alloc::string::String,
    /// The query to filter the products.
    ///
    /// The supported queries are:
    /// * List products of all catalogs: empty
    /// * List products under a catalog: `parent=catalogs/{catalog}`
    /// * Get a product by name:
    /// `name=catalogs/{catalog}/products/{product}`
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
    /// The maximum number of entries that are requested.
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    /// A pagination token returned from a previous call to SearchProducts that
    /// indicates where this listing should continue from.
    #[prost(string, tag = "4")]
    pub page_token: ::prost::alloc::string::String,
}
/// Response message for [PrivateCatalog.SearchProducts][google.cloud.privatecatalog.v1beta1.PrivateCatalog.SearchProducts].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchProductsResponse {
    /// The `Product` resources computed from the resource context.
    #[prost(message, repeated, tag = "1")]
    pub products: ::prost::alloc::vec::Vec<Product>,
    /// A pagination token returned from a previous call to SearchProducts that
    /// indicates from where listing should continue.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for [PrivateCatalog.SearchVersions][google.cloud.privatecatalog.v1beta1.PrivateCatalog.SearchVersions].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchVersionsRequest {
    /// Required. The name of the resource context. See [SearchCatalogsRequest.resource][google.cloud.privatecatalog.v1beta1.SearchCatalogsRequest.resource]
    /// for details.
    #[prost(string, tag = "1")]
    pub resource: ::prost::alloc::string::String,
    /// Required. The query to filter the versions.
    ///
    /// The supported queries are:
    /// * List versions under a product:
    /// `parent=catalogs/{catalog}/products/{product}`
    /// * Get a version by name:
    /// `name=catalogs/{catalog}/products/{product}/versions/{version}`
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
    /// The maximum number of entries that are requested.
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    /// A pagination token returned from a previous call to SearchVersions
    /// that indicates where this listing should continue from.
    #[prost(string, tag = "4")]
    pub page_token: ::prost::alloc::string::String,
}
/// Response message for [PrivateCatalog.SearchVersions][google.cloud.privatecatalog.v1beta1.PrivateCatalog.SearchVersions].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchVersionsResponse {
    /// The `Version` resources computed from the resource context.
    #[prost(message, repeated, tag = "1")]
    pub versions: ::prost::alloc::vec::Vec<Version>,
    /// A pagination token returned from a previous call to SearchVersions that
    /// indicates from where the listing should continue.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// The readonly representation of a catalog computed with a given resource
/// context.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Catalog {
    /// Output only. The resource name of the target catalog, in the format of
    /// `catalogs/{catalog}'.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The descriptive name of the catalog as it appears in UIs.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// Output only. The description of the catalog.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Output only. The time when the catalog was created.
    #[prost(message, optional, tag = "4")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time when the catalog was last updated.
    #[prost(message, optional, tag = "5")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// The readonly representation of a product computed with a given resource
/// context.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Product {
    /// Output only. The resource name of the target product, in the format of
    /// `products/[a-z][-a-z0-9]*\[a-z0-9\]'.
    ///
    /// A unique identifier for the product under a catalog.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The type of the product asset. It can be one of the following values:
    ///
    /// * `google.deploymentmanager.Template`
    /// * `google.cloudprivatecatalog.ListingOnly`
    /// * `google.cloudprivatecatalog.Terraform`
    #[prost(string, tag = "2")]
    pub asset_type: ::prost::alloc::string::String,
    /// Required. Output only. The display metadata to describe the product. The JSON schema of the
    /// metadata differs by [Product.asset_type][google.cloud.privatecatalog.v1beta1.Product.asset_type].
    /// When the type is `google.deploymentmanager.Template`, the schema is as
    /// follows:
    ///
    /// ```
    /// "$schema": <http://json-schema.org/draft-04/schema#>
    /// type: object
    /// properties:
    ///    name:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 64
    ///    description:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 2048
    ///    tagline:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 100
    ///    support_info:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 2048
    ///    creator:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 100
    ///    documentations:
    ///      type: array
    ///      items:
    ///        type: object
    ///        properties:
    ///          url:
    ///            type: string
    ///            pattern:
    ///            "^(https?)://\[-a-zA-Z0-9+&@#/%?=~_|!:,.;\]*[-a-zA-Z0-9+&@#/%=~_|]"
    ///          title:
    ///            type: string
    ///            minLength: 1
    ///            maxLength: 64
    ///          description:
    ///            type: string
    ///            minLength: 1
    ///            maxLength: 2048
    /// required:
    /// - name
    /// - description
    /// additionalProperties: false
    ///
    /// ```
    ///
    /// When the asset type is `google.cloudprivatecatalog.ListingOnly`, the schema
    /// is as follows:
    ///
    /// ```
    /// "$schema": <http://json-schema.org/draft-04/schema#>
    /// type: object
    /// properties:
    ///    name:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 64
    ///    description:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 2048
    ///    tagline:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 100
    ///    support_info:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 2048
    ///    creator:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 100
    ///    documentations:
    ///      type: array
    ///      items:
    ///        type: object
    ///        properties:
    ///          url:
    ///            type: string
    ///            pattern:
    ///            "^(https?)://\[-a-zA-Z0-9+&@#/%?=~_|!:,.;\]*[-a-zA-Z0-9+&@#/%=~_|]"
    ///          title:
    ///            type: string
    ///            minLength: 1
    ///            maxLength: 64
    ///          description:
    ///            type: string
    ///            minLength: 1
    ///            maxLength: 2048
    ///    signup_url:
    ///      type: string
    ///      pattern:
    ///      "^(https?)://\[-a-zA-Z0-9+&@#/%?=~_|!:,.;\]*[-a-zA-Z0-9+&@#/%=~_|]"
    /// required:
    /// - name
    /// - description
    /// - signup_url
    /// additionalProperties: false
    ///
    /// ```
    ///
    /// When the asset type is `google.cloudprivatecatalog.Terraform`, the schema
    /// is as follows:
    ///
    /// ```
    /// "$schema": <http://json-schema.org/draft-04/schema#>
    /// type: object
    /// properties:
    ///    name:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 64
    ///    description:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 2048
    ///    tagline:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 100
    ///    support_info:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 2048
    ///    creator:
    ///      type: string
    ///      minLength: 1
    ///      maxLength: 100
    ///    documentations:
    ///      type: array
    ///      items:
    ///        type: object
    ///        properties:
    ///          url:
    ///            type: string
    ///            pattern:
    ///            "^(https?)://\[-a-zA-Z0-9+&@#/%?=~_|!:,.;\]*[-a-zA-Z0-9+&@#/%=~_|]"
    ///          title:
    ///            type: string
    ///            minLength: 1
    ///            maxLength: 64
    ///          description:
    ///            type: string
    ///            minLength: 1
    ///            maxLength: 2048
    /// required:
    /// - name
    /// - description
    /// additionalProperties: true
    #[prost(message, optional, tag = "3")]
    pub display_metadata: ::core::option::Option<::prost_types::Struct>,
    /// Output only. The icon URI of the product.
    #[prost(string, tag = "4")]
    pub icon_uri: ::prost::alloc::string::String,
    /// Output only. A collection of assets referred by a product.
    /// This field is set for Terraform Products only.
    #[prost(message, repeated, tag = "10")]
    pub asset_references: ::prost::alloc::vec::Vec<AssetReference>,
    /// Output only. The time when the product was created.
    #[prost(message, optional, tag = "5")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time when the product was last updated.
    #[prost(message, optional, tag = "6")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Defines the reference of an asset belonging to a product.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssetReference {
    /// Output only. A unique identifier among asset references in a product.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Output only. The human-readable description of the referenced asset. Maximum 256
    /// characters in length.
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// Output only. The definition of input parameters to hydrate the asset template.
    #[prost(message, optional, tag = "6")]
    pub inputs: ::core::option::Option<Inputs>,
    /// Output only. The current state of the asset reference.
    #[prost(enumeration = "asset_reference::AssetValidationState", tag = "7")]
    pub validation_status: i32,
    /// Output only. The validation process metadata.
    #[prost(message, optional, tag = "8")]
    pub validation_operation: ::core::option::Option<
        super::super::super::longrunning::Operation,
    >,
    /// Output only. The cloud storage source.
    #[prost(message, optional, tag = "16")]
    pub gcs_source: ::core::option::Option<GcsSource>,
    /// Output only. The creation timestamp of the asset reference.
    #[prost(message, optional, tag = "12")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The last update timestamp of the asset reference.
    #[prost(message, optional, tag = "13")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The version of the source used for this asset reference.
    #[deprecated]
    #[prost(string, tag = "14")]
    pub version: ::prost::alloc::string::String,
    /// The destination of the asset.
    #[prost(oneof = "asset_reference::Source", tags = "10, 11, 15")]
    pub source: ::core::option::Option<asset_reference::Source>,
}
/// Nested message and enum types in `AssetReference`.
pub mod asset_reference {
    /// Possible validation steates of an asset reference.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum AssetValidationState {
        /// Unknown state.
        Unspecified = 0,
        /// The validation is still in process.
        Pending = 1,
        /// The validation is done and the asset reference is valid.
        Valid = 2,
        /// The validation is done and the asset reference is invalid.
        Invalid = 3,
    }
    impl AssetValidationState {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "ASSET_VALIDATION_STATE_UNSPECIFIED",
                Self::Pending => "PENDING",
                Self::Valid => "VALID",
                Self::Invalid => "INVALID",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ASSET_VALIDATION_STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "PENDING" => Some(Self::Pending),
                "VALID" => Some(Self::Valid),
                "INVALID" => Some(Self::Invalid),
                _ => None,
            }
        }
    }
    /// The destination of the asset.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Source {
        /// Output only. The asset resource name if an asset is hosted by Private Catalog.
        #[prost(string, tag = "10")]
        Asset(::prost::alloc::string::String),
        /// Output only. The cloud storage object path.
        #[prost(string, tag = "11")]
        GcsPath(::prost::alloc::string::String),
        /// Output only. The git source.
        #[prost(message, tag = "15")]
        GitSource(super::GitSource),
    }
}
/// Defines definition of input parameters of asset templates.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Inputs {
    /// Output only. The JSON schema defining the inputs and their formats.
    #[prost(message, optional, tag = "1")]
    pub parameters: ::core::option::Option<::prost_types::Struct>,
}
/// Defines how to access Cloud Storage source.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GcsSource {
    /// Output only. the cloud storage object path.
    #[prost(string, tag = "1")]
    pub gcs_path: ::prost::alloc::string::String,
    /// Output only. Generation of the object, which is set when the content of an object starts
    /// being written.
    #[prost(int64, tag = "2")]
    pub generation: i64,
    /// Output only. The time when the object metadata was last changed.
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Defines how to access a Git Source.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitSource {
    /// Location of the Git repo to build.
    #[prost(string, tag = "1")]
    pub repo: ::prost::alloc::string::String,
    /// Directory, relative to the source root, in which to run the build.
    ///
    /// This must be a relative path. If a step's `dir` is specified and is an
    /// absolute path, this value is ignored for that step's execution.
    #[prost(string, tag = "2")]
    pub dir: ::prost::alloc::string::String,
    /// The revision to fetch from the Git repository such as a branch, a tag, a
    /// commit SHA, or any Git ref.
    #[prost(oneof = "git_source::Ref", tags = "3, 4, 5")]
    pub r#ref: ::core::option::Option<git_source::Ref>,
}
/// Nested message and enum types in `GitSource`.
pub mod git_source {
    /// The revision to fetch from the Git repository such as a branch, a tag, a
    /// commit SHA, or any Git ref.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ref {
        /// The revision commit to use.
        #[prost(string, tag = "3")]
        Commit(::prost::alloc::string::String),
        /// The revision branch to use.
        #[prost(string, tag = "4")]
        Branch(::prost::alloc::string::String),
        /// The revision tag to use.
        #[prost(string, tag = "5")]
        Tag(::prost::alloc::string::String),
    }
}
/// The consumer representation of a version which is a child resource under a
/// `Product` with asset data.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Version {
    /// Output only. The resource name of the version, in the format
    /// `catalogs/{catalog}/products/{product}/versions/[a-z][-a-z0-9]*\[a-z0-9\]'.
    ///
    /// A unique identifier for the version under a product.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The user-supplied description of the version. Maximum of 256
    /// characters.
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// Output only. The asset which has been validated and is ready to be
    /// provisioned. See
    /// [google.cloud.privatecatalogproducer.v1beta.Version.asset][] for details.
    #[prost(message, optional, tag = "3")]
    pub asset: ::core::option::Option<::prost_types::Struct>,
    /// Output only. The time when the version was created.
    #[prost(message, optional, tag = "5")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time when the version was last updated.
    #[prost(message, optional, tag = "6")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Generated server implementations.
pub mod private_catalog_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with PrivateCatalogServer.
    #[async_trait]
    pub trait PrivateCatalog: std::marker::Send + std::marker::Sync + 'static {
        /// Search [Catalog][google.cloud.privatecatalog.v1beta1.Catalog] resources that consumers have access to, within the
        /// scope of the consumer cloud resource hierarchy context.
        async fn search_catalogs(
            &self,
            request: tonic::Request<super::SearchCatalogsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchCatalogsResponse>,
            tonic::Status,
        >;
        /// Search [Product][google.cloud.privatecatalog.v1beta1.Product] resources that consumers have access to, within the
        /// scope of the consumer cloud resource hierarchy context.
        async fn search_products(
            &self,
            request: tonic::Request<super::SearchProductsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchProductsResponse>,
            tonic::Status,
        >;
        /// Search [Version][google.cloud.privatecatalog.v1beta1.Version] resources that consumers have access to, within the
        /// scope of the consumer cloud resource hierarchy context.
        async fn search_versions(
            &self,
            request: tonic::Request<super::SearchVersionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchVersionsResponse>,
            tonic::Status,
        >;
    }
    /// `PrivateCatalog` allows catalog consumers to retrieve `Catalog`, `Product`
    /// and `Version` resources under a target resource context.
    ///
    /// `Catalog` is computed based on the [Association][]s linked to the target
    /// resource and its ancestors. Each association's
    /// [google.cloud.privatecatalogproducer.v1beta.Catalog][] is transformed into a
    /// `Catalog`. If multiple associations have the same parent
    /// [google.cloud.privatecatalogproducer.v1beta.Catalog][], they are
    /// de-duplicated into one `Catalog`. Users must have
    /// `cloudprivatecatalog.catalogTargets.get` IAM permission on the resource
    /// context in order to access catalogs. `Catalog` contains the resource name and
    /// a subset of data of the original
    /// [google.cloud.privatecatalogproducer.v1beta.Catalog][].
    ///
    /// `Product` is child resource of the catalog. A `Product` contains the resource
    /// name and a subset of the data of the original
    /// [google.cloud.privatecatalogproducer.v1beta.Product][].
    ///
    /// `Version` is child resource of the product. A `Version` contains the resource
    /// name and a subset of the data of the original
    /// [google.cloud.privatecatalogproducer.v1beta.Version][].
    #[derive(Debug)]
    pub struct PrivateCatalogServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> PrivateCatalogServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for PrivateCatalogServer<T>
    where
        T: PrivateCatalog,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/google.cloud.privatecatalog.v1beta1.PrivateCatalog/SearchCatalogs" => {
                    #[allow(non_camel_case_types)]
                    struct SearchCatalogsSvc<T: PrivateCatalog>(pub Arc<T>);
                    impl<
                        T: PrivateCatalog,
                    > tonic::server::UnaryService<super::SearchCatalogsRequest>
                    for SearchCatalogsSvc<T> {
                        type Response = super::SearchCatalogsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchCatalogsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PrivateCatalog>::search_catalogs(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchCatalogsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.privatecatalog.v1beta1.PrivateCatalog/SearchProducts" => {
                    #[allow(non_camel_case_types)]
                    struct SearchProductsSvc<T: PrivateCatalog>(pub Arc<T>);
                    impl<
                        T: PrivateCatalog,
                    > tonic::server::UnaryService<super::SearchProductsRequest>
                    for SearchProductsSvc<T> {
                        type Response = super::SearchProductsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchProductsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PrivateCatalog>::search_products(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchProductsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.cloud.privatecatalog.v1beta1.PrivateCatalog/SearchVersions" => {
                    #[allow(non_camel_case_types)]
                    struct SearchVersionsSvc<T: PrivateCatalog>(pub Arc<T>);
                    impl<
                        T: PrivateCatalog,
                    > tonic::server::UnaryService<super::SearchVersionsRequest>
                    for SearchVersionsSvc<T> {
                        type Response = super::SearchVersionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchVersionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PrivateCatalog>::search_versions(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchVersionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for PrivateCatalogServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "google.cloud.privatecatalog.v1beta1.PrivateCatalog";
    impl<T> tonic::server::NamedService for PrivateCatalogServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}

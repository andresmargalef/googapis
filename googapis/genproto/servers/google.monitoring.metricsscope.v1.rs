// This file is @generated by prost-build.
/// Represents a [Metrics
/// Scope](<https://cloud.google.com/monitoring/settings#concept-scope>) in Cloud
/// Monitoring, which specifies one or more Google projects and zero or more AWS
/// accounts to monitor together.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricsScope {
    /// Immutable. The resource name of the Monitoring Metrics Scope.
    /// On input, the resource name can be specified with the
    /// scoping project ID or number. On output, the resource name is
    /// specified with the scoping project number.
    /// Example:
    /// `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The time when this `Metrics Scope` was created.
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time when this `Metrics Scope` record was last updated.
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The list of projects monitored by this `Metrics Scope`.
    #[prost(message, repeated, tag = "4")]
    pub monitored_projects: ::prost::alloc::vec::Vec<MonitoredProject>,
}
/// A [project being
/// monitored](<https://cloud.google.com/monitoring/settings/multiple-projects#create-multi>)
/// by a `Metrics Scope`.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonitoredProject {
    /// Immutable. The resource name of the `MonitoredProject`. On input, the resource name
    /// includes the scoping project ID and monitored project ID. On output, it
    /// contains the equivalent project numbers.
    /// Example:
    /// `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The time when this `MonitoredProject` was created.
    #[prost(message, optional, tag = "6")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Request for the `GetMetricsScope` method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMetricsScopeRequest {
    /// Required. The resource name of the `Metrics Scope`.
    /// Example:
    /// `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request for the `ListMetricsScopesByMonitoredProject` method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListMetricsScopesByMonitoredProjectRequest {
    /// Required. The resource name of the `Monitored Project` being requested.
    /// Example:
    /// `projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
    #[prost(string, tag = "1")]
    pub monitored_resource_container: ::prost::alloc::string::String,
}
/// Response for the `ListMetricsScopesByMonitoredProject` method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListMetricsScopesByMonitoredProjectResponse {
    /// A set of all metrics scopes that the specified monitored project has been
    /// added to.
    #[prost(message, repeated, tag = "1")]
    pub metrics_scopes: ::prost::alloc::vec::Vec<MetricsScope>,
}
/// Request for the `CreateMonitoredProject` method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateMonitoredProjectRequest {
    /// Required. The resource name of the existing `Metrics Scope` that will monitor this
    /// project.
    /// Example:
    /// `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The initial `MonitoredProject` configuration.
    /// Specify only the `monitored_project.name` field. All other fields are
    /// ignored. The `monitored_project.name` must be in the format:
    /// `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
    #[prost(message, optional, tag = "2")]
    pub monitored_project: ::core::option::Option<MonitoredProject>,
}
/// Request for the `DeleteMonitoredProject` method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteMonitoredProjectRequest {
    /// Required. The resource name of the `MonitoredProject`.
    /// Example:
    /// `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
    ///
    /// Authorization requires the following [Google
    /// IAM](<https://cloud.google.com/iam>) permissions on both the `Metrics Scope`
    /// and on the `MonitoredProject`: `monitoring.metricsScopes.link`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Contains metadata for longrunning operation for the edit Metrics Scope
/// endpoints.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
    /// Current state of the batch operation.
    #[prost(enumeration = "operation_metadata::State", tag = "1")]
    pub state: i32,
    /// The time when the batch request was received.
    #[prost(message, optional, tag = "5")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The time when the operation result was last updated.
    #[prost(message, optional, tag = "6")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Nested message and enum types in `OperationMetadata`.
pub mod operation_metadata {
    /// Batch operation states.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// Invalid.
        Unspecified = 0,
        /// Request has been received.
        Created = 1,
        /// Request is actively being processed.
        Running = 2,
        /// The batch processing is done.
        Done = 3,
        /// The batch processing was cancelled.
        Cancelled = 4,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::Created => "CREATED",
                State::Running => "RUNNING",
                State::Done => "DONE",
                State::Cancelled => "CANCELLED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "CREATED" => Some(Self::Created),
                "RUNNING" => Some(Self::Running),
                "DONE" => Some(Self::Done),
                "CANCELLED" => Some(Self::Cancelled),
                _ => None,
            }
        }
    }
}
/// Generated server implementations.
pub mod metrics_scopes_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MetricsScopesServer.
    #[async_trait]
    pub trait MetricsScopes: Send + Sync + 'static {
        /// Returns a specific `Metrics Scope`.
        async fn get_metrics_scope(
            &self,
            request: tonic::Request<super::GetMetricsScopeRequest>,
        ) -> std::result::Result<tonic::Response<super::MetricsScope>, tonic::Status>;
        /// Returns a list of every `Metrics Scope` that a specific `MonitoredProject`
        /// has been added to. The metrics scope representing the specified monitored
        /// project will always be the first entry in the response.
        async fn list_metrics_scopes_by_monitored_project(
            &self,
            request: tonic::Request<super::ListMetricsScopesByMonitoredProjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListMetricsScopesByMonitoredProjectResponse>,
            tonic::Status,
        >;
        /// Adds a `MonitoredProject` with the given project ID
        /// to the specified `Metrics Scope`.
        async fn create_monitored_project(
            &self,
            request: tonic::Request<super::CreateMonitoredProjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
        /// Deletes a `MonitoredProject` from the specified `Metrics Scope`.
        async fn delete_monitored_project(
            &self,
            request: tonic::Request<super::DeleteMonitoredProjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        >;
    }
    /// Manages Cloud Monitoring Metrics Scopes, and the monitoring of Google Cloud
    /// projects and AWS accounts.
    #[derive(Debug)]
    pub struct MetricsScopesServer<T: MetricsScopes> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: MetricsScopes> MetricsScopesServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MetricsScopesServer<T>
    where
        T: MetricsScopes,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/google.monitoring.metricsscope.v1.MetricsScopes/GetMetricsScope" => {
                    #[allow(non_camel_case_types)]
                    struct GetMetricsScopeSvc<T: MetricsScopes>(pub Arc<T>);
                    impl<
                        T: MetricsScopes,
                    > tonic::server::UnaryService<super::GetMetricsScopeRequest>
                    for GetMetricsScopeSvc<T> {
                        type Response = super::MetricsScope;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetMetricsScopeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetricsScopes>::get_metrics_scope(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetMetricsScopeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.monitoring.metricsscope.v1.MetricsScopes/ListMetricsScopesByMonitoredProject" => {
                    #[allow(non_camel_case_types)]
                    struct ListMetricsScopesByMonitoredProjectSvc<T: MetricsScopes>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MetricsScopes,
                    > tonic::server::UnaryService<
                        super::ListMetricsScopesByMonitoredProjectRequest,
                    > for ListMetricsScopesByMonitoredProjectSvc<T> {
                        type Response = super::ListMetricsScopesByMonitoredProjectResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ListMetricsScopesByMonitoredProjectRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetricsScopes>::list_metrics_scopes_by_monitored_project(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListMetricsScopesByMonitoredProjectSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.monitoring.metricsscope.v1.MetricsScopes/CreateMonitoredProject" => {
                    #[allow(non_camel_case_types)]
                    struct CreateMonitoredProjectSvc<T: MetricsScopes>(pub Arc<T>);
                    impl<
                        T: MetricsScopes,
                    > tonic::server::UnaryService<super::CreateMonitoredProjectRequest>
                    for CreateMonitoredProjectSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateMonitoredProjectRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetricsScopes>::create_monitored_project(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreateMonitoredProjectSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/google.monitoring.metricsscope.v1.MetricsScopes/DeleteMonitoredProject" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteMonitoredProjectSvc<T: MetricsScopes>(pub Arc<T>);
                    impl<
                        T: MetricsScopes,
                    > tonic::server::UnaryService<super::DeleteMonitoredProjectRequest>
                    for DeleteMonitoredProjectSvc<T> {
                        type Response = super::super::super::super::longrunning::Operation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteMonitoredProjectRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetricsScopes>::delete_monitored_project(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeleteMonitoredProjectSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: MetricsScopes> Clone for MetricsScopesServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: MetricsScopes> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: MetricsScopes> tonic::server::NamedService for MetricsScopesServer<T> {
        const NAME: &'static str = "google.monitoring.metricsscope.v1.MetricsScopes";
    }
}

// This file is @generated by prost-build.
/// The request for [ListConnections][Management.ListConnections].
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConnectionsRequest {
    /// Required. Parent name of the form:
    ///      `projects/{project_number or project_id}/endpoints/{endpoint}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of connections to return. The service may return fewer
    /// than this value. If unspecified, at most 100 connections will be returned.
    /// The maximum value is 1000; values above 1000 will be coerced to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A page token, received from a previous `ListConnections` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListConnections` must
    /// match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
/// The response for
/// [ListConnections][Management.ListConnections].
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConnectionsResponse {
    /// A list of clients.
    #[prost(message, repeated, tag = "1")]
    pub connections: ::prost::alloc::vec::Vec<Connection>,
    /// A token that can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Connection {
    /// The endpoint that the connection is made against.
    /// Format: `projects/{project_number}/endpoints/{endpoint}`
    #[prost(string, tag = "1")]
    pub endpoint: ::prost::alloc::string::String,
    /// Cluster information.
    #[prost(message, optional, tag = "2")]
    pub cluster: ::core::option::Option<Cluster>,
    /// The count of streams.
    #[prost(int32, tag = "3")]
    pub stream_count: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cluster {
    /// The name of the cluster.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The region of the cluster.
    #[prost(string, tag = "2")]
    pub region: ::prost::alloc::string::String,
}
/// Generated server implementations.
pub mod connection_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ConnectionServiceServer.
    #[async_trait]
    pub trait ConnectionService: Send + Sync + 'static {
        /// Lists connections that are currently active for the given Apigee Connect
        /// endpoint.
        async fn list_connections(
            &self,
            request: tonic::Request<super::ListConnectionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListConnectionsResponse>,
            tonic::Status,
        >;
    }
    /// Service Interface for the Apigee Connect connection management APIs.
    #[derive(Debug)]
    pub struct ConnectionServiceServer<T: ConnectionService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: ConnectionService> ConnectionServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ConnectionServiceServer<T>
    where
        T: ConnectionService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/google.cloud.apigeeconnect.v1.ConnectionService/ListConnections" => {
                    #[allow(non_camel_case_types)]
                    struct ListConnectionsSvc<T: ConnectionService>(pub Arc<T>);
                    impl<
                        T: ConnectionService,
                    > tonic::server::UnaryService<super::ListConnectionsRequest>
                    for ListConnectionsSvc<T> {
                        type Response = super::ListConnectionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListConnectionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ConnectionService>::list_connections(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListConnectionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: ConnectionService> Clone for ConnectionServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: ConnectionService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: ConnectionService> tonic::server::NamedService
    for ConnectionServiceServer<T> {
        const NAME: &'static str = "google.cloud.apigeeconnect.v1.ConnectionService";
    }
}
/// gRPC request payload for tether.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EgressRequest {
    /// Unique identifier for the request.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Actual payload to send to agent.
    #[prost(message, optional, tag = "2")]
    pub payload: ::core::option::Option<Payload>,
    /// Tether Endpoint.
    #[prost(enumeration = "TetherEndpoint", tag = "3")]
    pub endpoint: i32,
    /// GCP Project.
    /// Format: `projects/{project_number}`.
    #[prost(string, tag = "4")]
    pub project: ::prost::alloc::string::String,
    /// Unique identifier for clients to trace their request/response.
    #[prost(string, tag = "5")]
    pub trace_id: ::prost::alloc::string::String,
    /// Timeout for the HTTP request.
    #[prost(message, optional, tag = "6")]
    pub timeout: ::core::option::Option<::prost_types::Duration>,
}
/// Payload for EgressRequest.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Payload {
    /// The kind of payload.
    #[prost(oneof = "payload::Kind", tags = "1, 2, 3")]
    pub kind: ::core::option::Option<payload::Kind>,
}
/// Nested message and enum types in `Payload`.
pub mod payload {
    /// The kind of payload.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kind {
        /// The HttpRequest proto.
        #[prost(message, tag = "1")]
        HttpRequest(super::HttpRequest),
        /// The information of stream.
        #[prost(message, tag = "2")]
        StreamInfo(super::StreamInfo),
        /// The action taken by agent.
        #[prost(enumeration = "super::Action", tag = "3")]
        Action(i32),
    }
}
/// The Information of bi-directional stream.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamInfo {
    /// Unique identifier for the stream.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
/// gRPC response payload for tether.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EgressResponse {
    /// Unique identifier for the response. Matches the EgressRequest's id.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// HttpResponse.
    #[prost(message, optional, tag = "2")]
    pub http_response: ::core::option::Option<HttpResponse>,
    /// Errors from application when handling the http request.
    #[prost(message, optional, tag = "3")]
    pub status: ::core::option::Option<super::super::super::rpc::Status>,
    /// GCP Project.
    /// Format: `projects/{project_number}`.
    #[prost(string, tag = "4")]
    pub project: ::prost::alloc::string::String,
    /// Unique identifier for clients to trace their request/response. Matches the
    /// EgressRequest's trace id
    #[prost(string, tag = "5")]
    pub trace_id: ::prost::alloc::string::String,
    /// Tether Endpoint.
    #[prost(enumeration = "TetherEndpoint", tag = "6")]
    pub endpoint: i32,
    /// Name is the full resource path of endpoint.
    /// Format: `projects/{project_number or project_id}/endpoints/{endpoint}`
    #[prost(string, tag = "7")]
    pub name: ::prost::alloc::string::String,
}
/// The proto definition of http request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HttpRequest {
    /// A unique identifier for the request.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// The HTTP request method.
    /// Valid methods: "GET", "HEAD", "POST", "PUT", "PATCH","DELETE".
    #[prost(string, tag = "2")]
    pub method: ::prost::alloc::string::String,
    /// The HTTP request URL.
    #[prost(message, optional, tag = "3")]
    pub url: ::core::option::Option<Url>,
    /// The HTTP request headers.
    #[prost(message, repeated, tag = "4")]
    pub headers: ::prost::alloc::vec::Vec<Header>,
    /// HTTP request body.
    #[prost(bytes = "vec", tag = "5")]
    pub body: ::prost::alloc::vec::Vec<u8>,
}
/// The proto definition of url.
/// A url represents a URL and the general form represented is:
///
///   `[scheme://][google.cloud.apigeeconnect.v1.Url.host][path]`
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Url {
    /// Scheme.
    #[prost(enumeration = "Scheme", tag = "1")]
    pub scheme: i32,
    /// Host or Host:Port.
    #[prost(string, tag = "2")]
    pub host: ::prost::alloc::string::String,
    /// Path starts with `/`.
    #[prost(string, tag = "3")]
    pub path: ::prost::alloc::string::String,
}
/// The http headers.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Header {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// The proto definition of http response.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HttpResponse {
    /// A unique identifier that matches the request ID.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Status of http response, e.g. "200 OK".
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    /// Status code of http response, e.g. 200.
    #[prost(int32, tag = "3")]
    pub status_code: i32,
    /// The HTTP 1.1 response body.
    #[prost(bytes = "vec", tag = "4")]
    pub body: ::prost::alloc::vec::Vec<u8>,
    /// The HTTP response headers.
    #[prost(message, repeated, tag = "5")]
    pub headers: ::prost::alloc::vec::Vec<Header>,
    /// Content length records the length of the associated content. The
    /// value -1 indicates that the length is unknown. Unless http method
    /// is "HEAD", values >= 0 indicate that the given number of bytes may
    /// be read from Body.
    #[prost(int64, tag = "6")]
    pub content_length: i64,
}
/// The action taken by agent.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Action {
    /// Unspecified Action.
    Unspecified = 0,
    /// Indicates that agent should open a new stream.
    OpenNewStream = 1,
}
impl Action {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Action::Unspecified => "ACTION_UNSPECIFIED",
            Action::OpenNewStream => "OPEN_NEW_STREAM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ACTION_UNSPECIFIED" => Some(Self::Unspecified),
            "OPEN_NEW_STREAM" => Some(Self::OpenNewStream),
            _ => None,
        }
    }
}
/// Endpoint indicates where the messages will be delivered.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TetherEndpoint {
    /// Unspecified tether endpoint.
    Unspecified = 0,
    /// Apigee MART endpoint.
    ApigeeMart = 1,
    /// Apigee Runtime endpoint.
    ApigeeRuntime = 2,
    /// Apigee Mint Rating endpoint.
    ApigeeMintRating = 3,
}
impl TetherEndpoint {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TetherEndpoint::Unspecified => "TETHER_ENDPOINT_UNSPECIFIED",
            TetherEndpoint::ApigeeMart => "APIGEE_MART",
            TetherEndpoint::ApigeeRuntime => "APIGEE_RUNTIME",
            TetherEndpoint::ApigeeMintRating => "APIGEE_MINT_RATING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TETHER_ENDPOINT_UNSPECIFIED" => Some(Self::Unspecified),
            "APIGEE_MART" => Some(Self::ApigeeMart),
            "APIGEE_RUNTIME" => Some(Self::ApigeeRuntime),
            "APIGEE_MINT_RATING" => Some(Self::ApigeeMintRating),
            _ => None,
        }
    }
}
/// HTTP Scheme.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Scheme {
    /// Unspecified scheme.
    Unspecified = 0,
    /// HTTPS protocol.
    Https = 1,
}
impl Scheme {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Scheme::Unspecified => "SCHEME_UNSPECIFIED",
            Scheme::Https => "HTTPS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCHEME_UNSPECIFIED" => Some(Self::Unspecified),
            "HTTPS" => Some(Self::Https),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod tether_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TetherServer.
    #[async_trait]
    pub trait Tether: Send + Sync + 'static {
        /// Server streaming response type for the Egress method.
        type EgressStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::EgressRequest, tonic::Status>,
            >
            + Send
            + 'static;
        /// Egress streams egress requests and responses. Logically, this is not
        /// actually a streaming request, but uses streaming as a mechanism to flip
        /// the client-server relationship of gRPC so that the server can act as a
        /// client.
        /// The listener, the RPC server, accepts connections from the dialer,
        /// the RPC client.
        /// The listener streams http requests and the dialer streams http responses.
        async fn egress(
            &self,
            request: tonic::Request<tonic::Streaming<super::EgressResponse>>,
        ) -> std::result::Result<tonic::Response<Self::EgressStream>, tonic::Status>;
    }
    /// Tether provides a way for the control plane to send HTTP API requests to
    /// services in data planes that runs in a remote datacenter without
    /// requiring customers to open firewalls on their runtime plane.
    #[derive(Debug)]
    pub struct TetherServer<T: Tether> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Tether> TetherServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TetherServer<T>
    where
        T: Tether,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/google.cloud.apigeeconnect.v1.Tether/Egress" => {
                    #[allow(non_camel_case_types)]
                    struct EgressSvc<T: Tether>(pub Arc<T>);
                    impl<
                        T: Tether,
                    > tonic::server::StreamingService<super::EgressResponse>
                    for EgressSvc<T> {
                        type Response = super::EgressRequest;
                        type ResponseStream = T::EgressStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::EgressResponse>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Tether>::egress(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = EgressSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Tether> Clone for TetherServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Tether> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Tether> tonic::server::NamedService for TetherServer<T> {
        const NAME: &'static str = "google.cloud.apigeeconnect.v1.Tether";
    }
}
